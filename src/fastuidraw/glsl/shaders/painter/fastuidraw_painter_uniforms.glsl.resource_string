/*!
 * \file fastuidraw_painter_uniforms.glsl.resource_string
 * \brief file fastuidraw_painter_uniforms.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

///////////////////////////////////////
// Painter Data Store
#ifdef FASTUIDRAW_PAINTER_USE_DATA_TBO

  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_STORE_BINDING) uniform usamplerBuffer fastuidraw_painterStore_tbo;
  #define fastuidraw_fetch_data(block) texelFetch(fastuidraw_painterStore_tbo, int(block))

#elif defined(FASTUIDRAW_PAINTER_USE_DATA_SSBO)

  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_BINDING, std430) restrict readonly buffer fastuidraw_painterStore_ssbo
  {
    uvec4 fastuidraw_painterStore[];
  };
 #define fastuidraw_fetch_data(block) fastuidraw_painterStore[int(block)]

#elif defined(FASTUIDRAW_PAINTER_USE_DATA_UBO)

  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_BINDING, std140) uniform fastuidraw_painterStore_ubo
  {
    uvec4 fastuidraw_painterStore[FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE];
  };
  #define fastuidraw_fetch_data(block) fastuidraw_painterStore[int(block)]

#endif

FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_EXTERNAL_TEXTURE_BINDING) uniform sampler2D fastuidraw_external_texture[FASTUIDRAW_PAINTER_NUMBER_EXTERNAL_TEXTURES];
