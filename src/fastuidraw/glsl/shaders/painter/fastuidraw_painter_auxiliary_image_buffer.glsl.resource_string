/*!
 * \file fastuidraw_painter_auxiliary_image_buffer.glsl.resource_string
 * \brief file fastuidraw_painter_auxiliary_image_buffer.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


#if defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_INTERLOCK) || defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_INTERLOCK_MAIN_ONLY)

  layout(binding = FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_BINDING, r8) restrict lowp uniform image2D fastuidraw_auxiliary_buffer;

  #if !defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_INTERLOCK_MAIN_ONLY)
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_begin_interlock()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_end_interlock()
  #else
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()
  #endif

  float
  fastuidraw_clear_auxiliary(void)
  {
    float r;
    ivec2 pos = ivec2(gl_FragCoord.xy);

    FASTUIDRAW_BEGIN_AUX_LOCK;
    r = imageLoad(fastuidraw_auxiliary_buffer, pos).x;
    imageStore(fastuidraw_auxiliary_buffer, pos, vec4(0.0, 0.0, 0.0, 0.0));
    FASTUIDRAW_END_AUX_LOCK;
    return r;
  }

  void
  fastuidraw_max_auxiliary(in float f)
  {
    ivec2 pos = ivec2(gl_FragCoord.xy);

    f = clamp(f, 0.0, 1.0);
    FASTUIDRAW_BEGIN_AUX_LOCK;
    f = max(imageLoad(fastuidraw_auxiliary_buffer, pos).x, f);
    imageStore(fastuidraw_auxiliary_buffer, pos, vec4(f, 0.0, 0.0, 0.0));
    FASTUIDRAW_END_AUX_LOCK;
  }

  //now define interlock functions opposite for the main.
  #undef FASTUIDRAW_BEGIN_AUX_LOCK
  #undef FASTUIDRAW_END_AUX_LOCK
  #if defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_INTERLOCK_MAIN_ONLY)
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_begin_interlock()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_end_interlock()
  #else
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()
  #endif

#elif defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_ATOMIC)

  layout(binding = FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_BINDING, r32ui) highp restrict uniform uimage2D fastuidraw_auxiliary_buffer;

  float
  fastuidraw_clear_auxiliary(void)
  {
    uint r;
    ivec2 pos = ivec2(gl_FragCoord.xy);
    r = imageAtomicExchange(fastuidraw_auxiliary_buffer, pos, 0u);
    return float(r) / 255.0;
  }

  void
  fastuidraw_max_auxiliary(in float f)
  {
    ivec2 pos = ivec2(gl_FragCoord.xy);
    uint r;

    r = uint(255.0 * clamp(f, 0.0, 1.0));
    imageAtomicMax(fastuidraw_auxiliary_buffer, pos, r);
  }

  #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
  #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()

#elif defined(FASTUIDRAW_PAINTER_AUXILIARY_BUFFER_FRAMEBUFFER_FETCH)

  layout(location = 1) inout float fastuidraw_auxiliary_buffer_inout;
  float fastuidraw_auxiliary_buffer_tmp;

  void
  fastuidraw_get_auxiliary_from_fb(void)
  {
    fastuidraw_auxiliary_buffer_tmp = fastuidraw_auxiliary_buffer_inout;
  }

  void
  fastuidraw_write_auxiliary_to_fb(void)
  {
    fastuidraw_auxiliary_buffer_inout = fastuidraw_auxiliary_buffer_tmp;
  }

  float
  fastuidraw_clear_auxiliary(void)
  {
    float r;
    r = fastuidraw_auxiliary_buffer_tmp;
    fastuidraw_auxiliary_buffer_tmp = 0.0;
    return r;
  }

  void
  fastuidraw_max_auxiliary(in float f)
  {
    f = clamp(f, 0.0, 1.0);
    fastuidraw_auxiliary_buffer_tmp = max(fastuidraw_auxiliary_buffer_tmp, f);
  }

  #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_get_auxiliary_from_fb()
  #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_write_auxiliary_to_fb()

#else

  float fastuidraw_clear_auxiliary(void)
  {
    return 0.0;
  }

  void fastuidraw_max_auxiliary(in float f)
  {
  }

  #define FASTUIDRAW_BEGIN_AUX_LOCK  fastuidraw_do_nothing()
  #define FASTUIDRAW_END_AUX_LOCK    fastuidraw_do_nothing()

#endif
