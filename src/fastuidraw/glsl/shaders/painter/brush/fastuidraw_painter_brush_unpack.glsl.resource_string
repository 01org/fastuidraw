/*!
 * \file fastuidraw_painter_brush_unpack.glsl.resource_string
 * \brief file fastuidraw_painter_brush_unpack.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


void
fastuidraw_process_image_data_common(in fastuidraw_brush_image_data_raw raw,
                                     out fastuidraw_brush_image_data cooked)
{
  cooked.image_size.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_x_bit0,
                                                fastuidraw_image_size_x_num_bits,
                                                raw.image_size_xy);

  cooked.image_size.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_y_bit0,
                                                fastuidraw_image_size_y_num_bits,
                                                raw.image_size_xy);

  cooked.image_start.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_x_bit0,
                                                 fastuidraw_image_size_x_num_bits,
                                                 raw.image_start_xy);

  cooked.image_start.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_size_y_bit0,
                                                 fastuidraw_image_size_y_num_bits,
                                                 raw.image_start_xy);
}

void
fastuidraw_process_image_data_on_atlas(in fastuidraw_brush_image_data_raw raw,
                                       inout fastuidraw_brush_image_data cooked)
{
  uvec3 master_xyz;
  uint index_pows, number_index_lookups, ww;

  master_xyz.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_x_bit0,
                                         fastuidraw_image_master_index_x_num_bits,
                                         raw.image_atlas_location_xyz);

  master_xyz.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_y_bit0,
                                         fastuidraw_image_master_index_y_num_bits,
                                         raw.image_atlas_location_xyz);

  master_xyz.z = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_master_index_z_bit0,
                                         fastuidraw_image_master_index_z_num_bits,
                                         raw.image_atlas_location_xyz);

  master_xyz.xy *= uint(FASTUIDRAW_IMAGE_ATLAS_INDEX_TILE_SIZE);
  cooked.master_index_tile_atlas_location_xyz = vec3(master_xyz);
  cooked.number_index_lookups = raw.image_number_lookups;
}

void
fastuidraw_process_image_data_bindless(in fastuidraw_brush_image_data_raw raw,
                                       inout fastuidraw_brush_image_data cooked)
{
  cooked.bindless_handle_hi = raw.image_atlas_location_xyz;
  cooked.bindless_handle_low = raw.image_number_lookups;
}

void
fastuidraw_process_gradient_data(in fastuidraw_brush_gradient_raw raw,
                                 out fastuidraw_brush_gradient cooked)
{
  cooked.p0 = raw.p0;
  cooked.p1 = raw.p1;

  cooked.r0 = raw.r0;
  cooked.r1 = raw.r1;

  cooked.color_stop_sequence_length = float(raw.color_stop_sequence_length);

  uvec2 color_stop_sequence_xy;
  color_stop_sequence_xy.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_color_stop_x_bit0,
                                                    fastuidraw_color_stop_x_num_bits,
                                                    raw.color_stop_sequence_xy);

  color_stop_sequence_xy.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_color_stop_y_bit0,
                                                    fastuidraw_color_stop_y_num_bits,
                                                    raw.color_stop_sequence_xy);

  cooked.color_stop_sequence_xy = vec2(color_stop_sequence_xy);
}

uint
fastuidraw_read_brush_image_data(in uint location, in uint image_type,
                                 out fastuidraw_brush_image_data image)
{
  uint return_value;
  fastuidraw_brush_image_data_raw raw;

  return_value = fastuidraw_read_brush_image_raw_data(location, raw);

  fastuidraw_process_image_data_common(raw, image);
  if (image_type == uint(fastuidraw_image_type_on_atlas))
    {
      fastuidraw_process_image_data_on_atlas(raw, image);
    }
  else
    {
      fastuidraw_process_image_data_bindless(raw, image);
    }
  return return_value;
}

uint
fastuidraw_read_brush_linear_or_sweep_gradient_data(in uint location, out fastuidraw_brush_gradient grad)
{
  uint return_value;
  fastuidraw_brush_gradient_raw raw;

  return_value = fastuidraw_read_brush_linear_or_sweep_gradient_data(location, raw);
  raw.r0 = 0.0;
  raw.r1 = 1.0;
  fastuidraw_process_gradient_data(raw, grad);
  return return_value;
}

uint
fastuidraw_read_brush_radial_gradient_data(in uint location, out fastuidraw_brush_gradient grad)
{
  uint return_value;
  fastuidraw_brush_gradient_raw raw;

  return_value = fastuidraw_read_brush_radial_gradient_data(location, raw);
  fastuidraw_process_gradient_data(raw, grad);
  return return_value;
}

/* Unpacks the brush data from the location at data_ptr
   to the values defined in the shader file
   fastuidraw_painter_brush_unpacked_values.glsl.resource_string.
   In addition, increments data_ptr to the location of the
   brush transformation matrix.
 */
void
fastuidraw_painter_brush_unpack_values(in uint shader, inout uint data_ptr)
{
  fastuidraw_brush_image_data image;
  fastuidraw_brush_gradient gradient;
  fastuidraw_brush_repeat_window repeat_window;
  uint image_type;
  uint gradient_type;

  vec4 color;
  data_ptr = fastuidraw_read_color(data_ptr, color);
  fastuidraw_brush_color_x = color.x;
  fastuidraw_brush_color_y = color.y;
  fastuidraw_brush_color_z = color.z;
  fastuidraw_brush_color_w = color.w;

  if (fastuidraw_brush_shader_has_image(shader))
    {
      image_type = FASTUIDRAW_EXTRACT_BITS(fastuidraw_image_type_bit0,
                                           fastuidraw_brush_image_filter_num_bits,
                                           shader);
      data_ptr = fastuidraw_read_brush_image_data(data_ptr, image_type, image);
    }

  gradient_type = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_gradient_type_bit0,
                                          fastuidraw_brush_gradient_type_num_bits,
                                          shader);
  if (gradient_type == fastuidraw_brush_radial_gradient_type)
    {
      data_ptr = fastuidraw_read_brush_radial_gradient_data(data_ptr, gradient);
    }
  else if (gradient_type == fastuidraw_brush_linear_gradient_type
           || gradient_type == fastuidraw_brush_sweep_gradient_type)
    {
      data_ptr = fastuidraw_read_brush_linear_or_sweep_gradient_data(data_ptr, gradient);
    }
  else
    {
      gradient.p0 = gradient.p1 = vec2(0.0, 0.0);
      gradient.r0 = gradient.r1 = 0.0;
      gradient.color_stop_sequence_length = 1.0;
      gradient.color_stop_sequence_xy = vec2(0.0, 0.0);
    }

  if (fastuidraw_brush_shader_has_repeat_window(shader))
    {
      data_ptr = fastuidraw_read_brush_repeat_window(data_ptr, repeat_window);
    }
  else
    {
      repeat_window.xy = vec2(0.0, 0.0);
      repeat_window.wh = vec2(1.0, 1.0);
    }

  float image_factor;

  fastuidraw_brush_repeat_window_x = repeat_window.xy.x;
  fastuidraw_brush_repeat_window_y = repeat_window.xy.y;
  fastuidraw_brush_repeat_window_w = repeat_window.wh.x;
  fastuidraw_brush_repeat_window_h = repeat_window.wh.y;

  fastuidraw_brush_gradient_p0_x = gradient.p0.x;
  fastuidraw_brush_gradient_p0_y = gradient.p0.y;
  fastuidraw_brush_gradient_p1_x = gradient.p1.x;
  fastuidraw_brush_gradient_p1_y = gradient.p1.y;
  fastuidraw_brush_gradient_r0 = gradient.r0;
  fastuidraw_brush_gradient_r1 = gradient.r1;

  fastuidraw_brush_image_size_x = float(image.image_size.x);
  fastuidraw_brush_image_size_y = float(image.image_size.y);
  if (image_type == uint(fastuidraw_image_type_on_atlas))
    {
      vec2 T;

      image_factor = 1.0 / float(fastuidraw_compute_image_size_divided_by_master_tile_size(image.number_index_lookups));
      T = image.master_index_tile_atlas_location_xyz.xy + vec2(image.image_start) * image_factor;
      fastuidraw_brush_image_x = T.x;
      fastuidraw_brush_image_y = T.y;
      fastuidraw_brush_image_layer = uint(image.master_index_tile_atlas_location_xyz.z);
      fastuidraw_brush_image_factor = image_factor;
      fastuidraw_brush_image_number_index_lookups = image.number_index_lookups;
    }
  else
    {
      fastuidraw_brush_image_x = float(image.image_start.x);
      fastuidraw_brush_image_y = float(image.image_start.y);
      fastuidraw_brush_image_bindless_low_handle = image.bindless_handle_low;
      fastuidraw_brush_image_bindless_high_handle = image.bindless_handle_hi;
    }

  float color_stop_recip;

  color_stop_recip = fastuidraw_colorStopAtlas_size_reciprocal;
  fastuidraw_brush_color_stop_length = color_stop_recip * gradient.color_stop_sequence_length;
  fastuidraw_brush_color_stop_x = color_stop_recip * gradient.color_stop_sequence_xy.x;
  fastuidraw_brush_color_stop_y = gradient.color_stop_sequence_xy.y;
  fastuidraw_brush_shader = shader;
}

uint
fastuidraw_painter_offset_to_transformation(uint shader)
{
  uint gradient_type, r;

  r = uint(fastuidraw_brush_pen_num_blocks);

  if (fastuidraw_brush_shader_has_image(shader))
    {
      r += uint(fastuidraw_brush_image_num_blocks);
    }

  gradient_type = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_gradient_type_bit0,
                                          fastuidraw_brush_gradient_type_num_bits,
                                          shader);
  if (gradient_type == fastuidraw_brush_radial_gradient_type)
    {
      r += uint(fastuidraw_brush_radial_gradient_num_blocks);
    }
  else if (gradient_type == fastuidraw_brush_linear_gradient_type)
    {
      r += uint(fastuidraw_brush_linear_gradient_num_blocks);
    }
  else if (gradient_type == fastuidraw_brush_sweep_gradient_type)
    {
      r += uint(fastuidraw_brush_sweep_gradient_num_blocks);
    }

  if (fastuidraw_brush_shader_has_repeat_window(shader))
    {
      r += uint(fastuidraw_brush_repeat_window_num_blocks);
    }

  return r;
}
