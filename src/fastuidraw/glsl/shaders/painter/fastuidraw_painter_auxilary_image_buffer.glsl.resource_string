#if defined(FASTUIDRAW_PAINTER_AUXILARY_BUFFER_INTERLOCK) || defined(FASTUIDRAW_PAINTER_AUXILARY_BUFFER_INTERLOCK_MAIN_ONLY)

  layout(binding = FASTUIDRAW_PAINTER_AUXILARY_BUFFER_BINDING, r8ui) restrict uniform uimage2D fastuidraw_auxilary_buffer;

  #if !defined(FASTUIDRAW_PAINTER_AUXILARY_BUFFER_INTERLOCK_MAIN_ONLY)
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_begin_interlock()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_end_interlock()
  #else
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()
  #endif

  float
  fastuidraw_clear_auxilary(void)
  {
    uint r;
    ivec2 pos = ivec2(gl_FragCoord.xy);

    FASTUIDRAW_BEGIN_AUX_LOCK;
    r = imageLoad(fastuidraw_auxilary_buffer, pos).x;
    imageStore(fastuidraw_auxilary_buffer, pos, uvec4(0u, 0u, 0u, 0u));
    FASTUIDRAW_END_AUX_LOCK;
    return float(r) / 255.0f;
  }

  void
  fastuidraw_max_auxilary(in float f)
  {
    ivec2 pos = ivec2(gl_FragCoord.xy);
    uint r;

    r = uint(255.0 * clamp(f, 0.0, 1.0));
    FASTUIDRAW_BEGIN_AUX_LOCK;
    r = max(imageLoad(fastuidraw_auxilary_buffer, pos).x, r);
    imageStore(fastuidraw_auxilary_buffer, pos, uvec4(r, 0u, 0u, 0u));
    FASTUIDRAW_END_AUX_LOCK;
  }

  //now define interlock functions opposite for the main.
  #undef FASTUIDRAW_BEGIN_AUX_LOCK
  #undef FASTUIDRAW_END_AUX_LOCK
  #if defined(FASTUIDRAW_PAINTER_AUXILARY_BUFFER_INTERLOCK_MAIN_ONLY)
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_begin_interlock()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_end_interlock()
  #else
    #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
    #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()
  #endif

#elif defined(FASTUIDRAW_PAINTER_AUXILARY_BUFFER_ATOMIC)

  layout(binding = FASTUIDRAW_PAINTER_AUXILARY_BUFFER_BINDING, r32ui) restrict uniform uimage2D fastuidraw_auxilary_buffer;

  float
  fastuidraw_clear_auxilary(void)
  {
    uint r;
    ivec2 pos = ivec2(gl_FragCoord.xy);
    r = imageAtomicExchange(fastuidraw_auxilary_buffer, pos, 0u);
    return float(r) / 255.0;
  }

  void
  fastuidraw_max_auxilary(in float f)
  {
    ivec2 pos = ivec2(gl_FragCoord.xy);
    uint r;

    r = uint(255.0 * clamp(f, 0.0, 1.0));
    imageAtomicMax(fastuidraw_auxilary_buffer, pos, r);
  }

  #define FASTUIDRAW_BEGIN_AUX_LOCK fastuidraw_do_nothing()
  #define FASTUIDRAW_END_AUX_LOCK   fastuidraw_do_nothing()

#else

  float fastuidraw_clear_auxilary(void)
  {
    return 0.0;
  }

  void fastuidraw_max_auxilary(in float f)
  {
  }

  #define FASTUIDRAW_BEGIN_AUX_LOCK  fastuidraw_do_nothing()
  #define FASTUIDRAW_END_AUX_LOCK    fastuidraw_do_nothing()

#endif
