/*!
 * \file fastuidraw_painter_glyph_curve_pair.frag.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_curve_pair.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  /*
    varyings:
     fastuidraw_glyph_tex_coord_x
     fastuidraw_glyph_tex_coord_y
     fastuidraw_glyph_secondary_tex_coord_x
     fastuidraw_glyph_secondary_tex_coord_y
     fastuidraw_glyph_tex_coord_layer
     fastuidraw_glyph_secondary_tex_coord_layer
     fastuidraw_glyph_geometry_data_location

    glyph texel store at:
     fastuidraw_glyphTexelStoreUINT
     fastuidraw_glyphTexelStoreFLOAT

    glyph geometry store at:
     fastuidraw_fetch_glyph_data (macro)
  */
  uint texel0, texel1, texel;
  float d, coverage, scale_inverse;
  vec2 tex_coord, dx, dy;


  tex_coord = vec2(fastuidraw_glyph_tex_coord_x,
                   fastuidraw_glyph_tex_coord_y);

  texel0 = texelFetch(fastuidraw_glyphTexelStoreUINT,
                      ivec3(tex_coord, fastuidraw_glyph_tex_coord_layer),
                      0).r;

  if (fastuidraw_glyph_secondary_tex_coord_layer > -0.5)
    {
      texel1 = texelFetch(fastuidraw_glyphTexelStoreUINT,
                          ivec3(fastuidraw_glyph_secondary_tex_coord_x,
                                fastuidraw_glyph_secondary_tex_coord_y,
                                fastuidraw_glyph_secondary_tex_coord_layer),
                          0).r;
      texel = texel0 + (texel1 << uint(8));
    }
  else
    {
      texel = texel0;
    }
  d = fastuidraw_curvepair_pseudo_distance(texel, tex_coord,
                                          fastuidraw_glyph_geometry_data_location);



  dx = dFdx(tex_coord);
  dy = dFdy(tex_coord);
  scale_inverse = max(1.0, inversesqrt(0.5 * (dot(dx,dx) + dot(dy,dy))));
  coverage = clamp(0.5 + d * scale_inverse, 0.0, 1.0);

  return vec4(1.0, 1.0, 1.0, coverage);
}
