/*!
 * \file fastuidraw_painter_glyph_restricted_rays.frag.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_restricted_rays.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

#ifndef BOX_FLAGS_DEFINED
#define BOX_FLAGS_DEFINED
#define MIN_X_BOX_FLAG (1u)
#define MAX_X_BOX_FLAG (2u)
#define MIN_Y_BOX_FLAG (4u)
#define MAX_Y_BOX_FLAG (8u)
#endif

struct FASTUIDRAW_LOCAL(transformation_type)
{
  vec2 translation;
  vec2 r_vector, jr_vector;
  vec2 em;
};

struct FASTUIDRAW_LOCAL(curve_type)
{
  vec2 A, B, C, p1, p2, p3;
  bool is_quadratic;
};

struct FASTUIDRAW_LOCAL(box_type)
{
  vec2 min_point, max_point, center_point;
  uint box_flags;
};

uint FASTUIDRAW_LOCAL(box_depth) = 0u;

uint
FASTUIDRAW_LOCAL(compute_box)(in vec2 p,
                              out FASTUIDRAW_LOCAL(box_type) box,
                              out uint curve_list,
                              out uint num_curves)
{
  uint v, offset;

  box.box_flags = (MIN_X_BOX_FLAG | MAX_X_BOX_FLAG | MIN_Y_BOX_FLAG | MAX_Y_BOX_FLAG);
  box.min_point = vec2(0.0, 0.0);
  box.max_point = vec2(fastuidraw_glyph_max_x, fastuidraw_glyph_max_y);

  offset = fastuidraw_glyph_data_location;
  v = fastuidraw_fetch_glyph_data(offset);

  while((v & HIERARCHY_NODE_MASK) != 0u)
    {
      uint c, bit0, and_flags = 0u;
      float split_pt;
      bool take_max_choice;

      c = FASTUIDRAW_EXTRACT_BITS(HIERARCHY_SPLIT_COORD_BIT, 1u, v);
      if (c == 0u)
        {
          split_pt = 0.5 * (box.min_point.x + box.max_point.x);
          take_max_choice = (p.x > split_pt);
          box.min_point.x = (take_max_choice) ? split_pt : box.min_point.x;
          box.max_point.x = (take_max_choice) ? box.max_point.x : split_pt;
          and_flags = (take_max_choice) ? (~MIN_X_BOX_FLAG) : (~MAX_X_BOX_FLAG);
        }
      else
        {
          split_pt = 0.5 * (box.min_point.y + box.max_point.y);
          take_max_choice = (p.y > split_pt);
          box.min_point.y = (take_max_choice) ? split_pt : box.min_point.y;
          box.max_point.y = (take_max_choice) ? box.max_point.y : split_pt;
          and_flags = (take_max_choice) ? (~MIN_Y_BOX_FLAG) : (~MAX_Y_BOX_FLAG);
        }

      bit0 = (take_max_choice) ? HIERARCHY_CHILD1_BIT : HIERARCHY_CHILD0_BIT;
      offset = FASTUIDRAW_EXTRACT_BITS(bit0, HIERARCHY_CHILD_NUM_BITS, v);
      offset += fastuidraw_glyph_data_location;
      v = fastuidraw_fetch_glyph_data(offset);
      box.box_flags &= and_flags;

      ++FASTUIDRAW_LOCAL(box_depth);
    }

  box.center_point = 0.5 * (box.min_point + box.max_point);
  curve_list = FASTUIDRAW_EXTRACT_BITS(HIERARCHY_CURVE_LIST_BIT0, HIERARCHY_CURVE_LIST_NUM_BITS, v);
  num_curves = FASTUIDRAW_EXTRACT_BITS(HIERARCHY_CURVE_LIST_SIZE_BIT0, HIERARCHY_CURVE_LIST_SIZE_NUM_BITS, v);

  return offset + 1u;
}


ivec2
FASTUIDRAW_LOCAL(unpack_point)(in uint ptr)
{
  uint pt_packed;
  uvec2 pt_u;
  ivec2 pt_i;

  pt_packed = fastuidraw_fetch_glyph_data(ptr);

  pt_u.x = FASTUIDRAW_EXTRACT_BITS(POINT_X_COORDINATE_BIT0, POINT_COORDINATE_NUM_BITS, pt_packed);
  pt_u.y = FASTUIDRAW_EXTRACT_BITS(POINT_Y_COORDINATE_BIT0, POINT_COORDINATE_NUM_BITS, pt_packed);
  pt_i = ivec2(pt_u) - ivec2(POINT_COORDINATE_BIAS);

  return pt_i;
}

void
FASTUIDRAW_LOCAL(compute_transformation)(in vec2 frag_point,
                                         in vec2 frag_point_dx,
                                         in vec2 frag_point_dy,
                                         in vec2 reference_point,
                                         out FASTUIDRAW_LOCAL(transformation_type) tr)
{
  vec2 q;

  q = reference_point - frag_point;
  q /= dot(q, q);

  tr.translation = frag_point;
  tr.r_vector = q;
  tr.jr_vector.x = -tr.r_vector.y;
  tr.jr_vector.y = tr.r_vector.x;

  tr.em.x = 1.0 / (abs(dot(tr.r_vector, frag_point_dx)) + abs(dot(tr.r_vector, frag_point_dy)));
  tr.em.y = 1.0 / (abs(dot(tr.jr_vector, frag_point_dx)) + abs(dot(tr.jr_vector, frag_point_dy)));
}

vec2
FASTUIDRAW_LOCAL(apply_transformation)(in vec2 p,
                                       in FASTUIDRAW_LOCAL(transformation_type) tr)
{
  p -= tr.translation;
  return vec2(dot(tr.r_vector, p),
              dot(tr.jr_vector, p));
}

vec2
FASTUIDRAW_LOCAL(apply_rotation_only)(in vec2 p,
                                      in FASTUIDRAW_LOCAL(transformation_type) tr)
{
  return vec2(dot(tr.r_vector, p),
              dot(tr.jr_vector, p));
}

float
FASTUIDRAW_LOCAL(choose_closest)(in vec2 v)
{
  vec2 w, s;

  s = vec2(sign(v));
  v *= s;
  w = abs(v - vec2(0.5, 0.5));
  return (w.x < w.y) ? v.x : v.y;
}

float
FASTUIDRAW_LOCAL(process_curve)(in vec2 p1, in vec2 p2, in vec2 p3,
                                in vec2 A, in vec2 B, in vec2 C,
                                in bool is_curve, in vec2 em)
{
  float R = 0.0;
  uint code;

  code = (p1.y > 0.0 ? 2u : 0u)
    + (p2.y > 0.0 ? 4u : 0u)
    + (p3.y > 0.0 ? 8u : 0u);

  code = (0x2E74u >> code) & 0x3u;
  if (code != 0u)
    {
      float t1, t2, x1, x2, x1_incr, x2_incr;
      float x1_pixel, x2_pixel;
      float d1, d2, v_inverse_norm;
      vec2 v;
      const float close_tol = 1.0;
      const float quad_tol = 0.0001;

      /* compute at what times the curve intersects the
       * horizontal line y = 0. For line segments,
       * we also compute the tangential unit vector
       * along the edge to compute an analytic distance
       * between the curve and fragment used when the
       * curve intersection is within one pixel of the
       * segment; This improves the anti-aliasing quality
       * for line segments because the coverage value is
       * then getting computed more accurately. For curves
       * we do not do this because the needed value is
       * more complicated in order to improve render
       * quality.
       */
      if (is_curve && abs(A.y) > quad_tol)
        {
          float D, rA = 1.0 / A.y;

          D = sqrt(max(B.y * B.y - A.y * C.y, 0.0));
          t1 = (B.y - D) * rA;
          t2 = (B.y + D) * rA;
          v = vec2(0.0, 1.0);
          v_inverse_norm = 1.0;
        }
      else
        {
          t1 = t2 = 0.5 * C.y / B.y;
          v = em * (p3 - p1);
          v_inverse_norm = 1.0 / length(v);
        }

      x1 = (A.x * t1 - B.x * 2.0) * t1 + C.x;
      x2 = (A.x * t2 - B.x * 2.0) * t2 + C.x;

      /* make position in pixel units */
      x1_pixel = x1 * em.x;
      x2_pixel = x2 * em.x;

      if (abs(x1_pixel) < close_tol)
        {
          d1 = x1_pixel * abs(v.y) * v_inverse_norm;
        }
      else
        {
          d1 = x1_pixel;
        }

      if (abs(x2_pixel) < close_tol)
        {
          d2 = x2_pixel * abs(v.y) * v_inverse_norm;
        }
      else
        {
          d2 = x2_pixel;
        }

      x1_incr = clamp(d1 + 0.5, 0.0, 1.0);
      x2_incr = clamp(d2 + 0.5, 0.0, 1.0);

      if ((code & 1u) != 0u && x1 < 1.0)
        {
          R += x1_incr;
        }

      if (code > 1u && x2 < 1.0)
        {
          R -= x2_incr;
        }
    }

  return R;
}

void
FASTUIDRAW_LOCAL(load_curve)(in uint raw,
                             in uint glyph_data_location,
                             out FASTUIDRAW_LOCAL(curve_type) curve)
{
  uint curve_src;
  ivec2 ip1, ip3, iA, i2B, iC;

  curve_src = glyph_data_location + FASTUIDRAW_EXTRACT_BITS(CURVE_BIT0, CURVE_NUM_BITS, raw);
  curve.is_quadratic = (raw & CURVE_IS_QUADRATIC_MASK) != 0u;

  if (curve.is_quadratic)
    {
      ivec2 ip2;

      ip1 = FASTUIDRAW_LOCAL(unpack_point)(curve_src);
      ip2 = FASTUIDRAW_LOCAL(unpack_point)(curve_src + 1u);
      ip3 = FASTUIDRAW_LOCAL(unpack_point)(curve_src + 2u);

      iA = ip1 - 2 * ip2 + ip3;
      i2B = 2 * (ip1 - ip2);
      iC = ip1;

      curve.p2 = vec2(ip2);
    }
  else
    {
      ivec2 ip2;

      ip1 = FASTUIDRAW_LOCAL(unpack_point)(curve_src);
      ip3 = FASTUIDRAW_LOCAL(unpack_point)(curve_src + 1u);

      /* ip2 is 0.5 * (ip1 + ip3) */
      iA = ivec2(0, 0);
      i2B = ip1 - ip3;
      iC = ip1;

      curve.p2 = 0.5 * vec2(ip1 + ip3);
    }

  curve.p1 = vec2(ip1);
  curve.p3 = vec2(ip3);

  curve.A = vec2(iA);
  curve.B = vec2(i2B) * 0.5;
  curve.C = vec2(iC);
}

vec2
FASTUIDRAW_LOCAL(load_and_process_curve)(in uint raw,
                                         in uint glyph_data_location,
                                         in FASTUIDRAW_LOCAL(transformation_type) tr0,
                                         in FASTUIDRAW_LOCAL(transformation_type) tr1)
{
  FASTUIDRAW_LOCAL(curve_type) curve_data;
  vec2 return_value;

  FASTUIDRAW_LOCAL(load_curve)(raw,
                               fastuidraw_glyph_data_location,
                               curve_data);


  /* We need to process the curve transformed by the given transformation.
   * However, the values of A, B, C require more care:
   *   A = p1 - 2 * p2 + p3 --> applying transformation to each of p's and computing A
   *                            gives that A is NOT affected by the translation
   *   B = 2 * (p1 - p2)    --> applying transformation to each of p's and computing B
   *                            gives that B is NOT affected by the translation
   *   C = p3               --> applying transformation to each of p's and computing C
   *                            gives that C IS affected by the translation
   */
  return_value.x = FASTUIDRAW_LOCAL(process_curve)(FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p1, tr0),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p2, tr0),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p3, tr0),
                                                   FASTUIDRAW_LOCAL(apply_rotation_only)(curve_data.A, tr0),
                                                   FASTUIDRAW_LOCAL(apply_rotation_only)(curve_data.B, tr0),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.C, tr0),
                                                   curve_data.is_quadratic, tr0.em);

  return_value.y = FASTUIDRAW_LOCAL(process_curve)(FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p1, tr1),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p2, tr1),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.p3, tr1),
                                                   FASTUIDRAW_LOCAL(apply_rotation_only)(curve_data.A, tr1),
                                                   FASTUIDRAW_LOCAL(apply_rotation_only)(curve_data.B, tr1),
                                                   FASTUIDRAW_LOCAL(apply_transformation)(curve_data.C, tr1),
                                                   curve_data.is_quadratic, tr1.em);

  return return_value;
}

int
FASTUIDRAW_LOCAL(load_winding_reference)(in uint location,
                                         in FASTUIDRAW_LOCAL(box_type) box,
                                         in uint sample_choice,
                                         in vec2 frag_position,
                                         out vec2 position)
{
  uint texel, biased_winding;
  uvec2 biased_delta;
  vec2 delta;

  if ((sample_choice & RIGHT_CORNER_MASK) == 0u
      && (box.box_flags & MIN_X_BOX_FLAG) != 0u)
    {
      position.x = -box.max_point.x;
      position.y = frag_position.y;
      return 0;
    }

  if ((sample_choice & RIGHT_CORNER_MASK) != 0u
      && (box.box_flags & MAX_X_BOX_FLAG) != 0u)
    {
      position.x = 2.0 * box.max_point.x;
      position.y = frag_position.y;
      return 0;
    }

  if ((sample_choice & TOP_CORNER_MASK) == 0u
      && (box.box_flags & MIN_Y_BOX_FLAG) != 0u)
    {
      position.x = frag_position.x;
      position.y = -box.max_point.y;
      return 0;
    }

  if ((sample_choice & TOP_CORNER_MASK) != 0u
      && (box.box_flags & MAX_Y_BOX_FLAG) != 0u)
    {
      position.x = frag_position.x;
      position.y = 2.0 * box.max_point.y;
      return 0;
    }

  position.x = ((sample_choice & RIGHT_CORNER_MASK) != 0u) ?
    box.max_point.x:
    box.min_point.x;

  position.y = ((sample_choice & TOP_CORNER_MASK) != 0u) ?
    box.max_point.y:
    box.min_point.y;

  texel = fastuidraw_fetch_glyph_data(location + sample_choice);

  biased_winding = FASTUIDRAW_EXTRACT_BITS(WINDING_VALUE_BIT0, WINDING_VALUE_NUM_BITS, texel);
  biased_delta.x = FASTUIDRAW_EXTRACT_BITS(POSITION_DELTA_X_BIT0, POSITION_DELTA_NUM_BITS, texel);
  biased_delta.y = FASTUIDRAW_EXTRACT_BITS(POSITION_DELTA_Y_BIT0, POSITION_DELTA_NUM_BITS, texel);

  delta = vec2(biased_delta) - vec2(float(POSITION_DELTA_BIAS));
  delta /= float(POSITION_DELTA_DIVIDE);
  position += delta;

  return int(biased_winding) - int(WINDING_VALUE_BIAS);
}

vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  uint src, num_curves, c, curve_list, data_location;
  vec2 z0, z1, alpha_01;
  vec2 frag_coord, frag_coord_dx, frag_coord_dy;
  ivec2 startw_01;
  float alpha;
  FASTUIDRAW_LOCAL(box_type) texel_box;
  FASTUIDRAW_LOCAL(transformation_type) tr0, tr1;

  frag_coord = vec2(fastuidraw_glyph_coord_x,
                    fastuidraw_glyph_coord_y);
  frag_coord_dx = dFdx(frag_coord);
  frag_coord_dy = dFdy(frag_coord);

  data_location = FASTUIDRAW_LOCAL(compute_box)(frag_coord, texel_box,
                                                curve_list, num_curves);

  /* choose the two sample points furthest from the fragment position.
   * There are 4 sample points to choose from, one at (essentially)
   * each corner.
   */
  uint sample_choice0 = 0u, sample_choice1;

  if (frag_coord.x < texel_box.center_point.x)
    {
      sample_choice0 |= RIGHT_CORNER_MASK;
    }
  if (frag_coord.y < texel_box.center_point.y)
    {
      sample_choice0 |= TOP_CORNER_MASK;
    }

  startw_01.x = FASTUIDRAW_LOCAL(load_winding_reference)(data_location, texel_box,
                                                         sample_choice0, frag_coord, z0);

  sample_choice1 = sample_choice0 ^ 1u;
  startw_01.y = FASTUIDRAW_LOCAL(load_winding_reference)(data_location, texel_box,
                                                         sample_choice1, frag_coord, z1);

  alpha_01 = vec2(startw_01);
  FASTUIDRAW_LOCAL(compute_transformation)(frag_coord,
                                           frag_coord_dx,
                                           frag_coord_dy,
                                           z0, tr0);

  FASTUIDRAW_LOCAL(compute_transformation)(frag_coord,
                                           frag_coord_dx,
                                           frag_coord_dy,
                                           z1, tr1);

  src = curve_list + fastuidraw_glyph_data_location;
  for (c = 0u; c < num_curves; c += 2u)
    {
      uint cA, cB, curve_pair;

      curve_pair = fastuidraw_fetch_glyph_data(src);
      ++src;

      cA = FASTUIDRAW_EXTRACT_BITS(CURVE_ENTRY0_BIT0, CURVE_ENTRY_NUM_BITS, curve_pair);
      alpha_01 += FASTUIDRAW_LOCAL(load_and_process_curve)(cA, fastuidraw_glyph_data_location, tr0, tr1);

      if (c + 1u < num_curves)
        {
          cB = FASTUIDRAW_EXTRACT_BITS(CURVE_ENTRY1_BIT0, CURVE_ENTRY_NUM_BITS, curve_pair);
          alpha_01 += FASTUIDRAW_LOCAL(load_and_process_curve)(cB, fastuidraw_glyph_data_location, tr0, tr1);
        }
    }

  alpha = FASTUIDRAW_LOCAL(choose_closest)(alpha_01);

  /**
  float bd = 0.0, tol_x = 3.0 * fwidth(frag_coord.x), tol_y = 3.0 * fwidth(frag_coord.y);
  if (abs(frag_coord.x - texel_box.min_point.x) < tol_x
      || abs(frag_coord.x - texel_box.max_point.x) < tol_x
      || abs(frag_coord.y - texel_box.min_point.y) < tol_y
      || abs(frag_coord.y - texel_box.max_point.y) < tol_y)
    {
      bd = 1.0;
    }
  return vec4(bd, float(FASTUIDRAW_LOCAL(box_depth)) / 8.0, alpha, 1.0);
  **/

  return vec4(1.0, 1.0, 1.0, alpha);
}
