/*!
 * \file fastuidraw_painter_glyph_restricted_rays.frag.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_restricted_rays.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */
vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  vec2 glyph_coord;
  fastuidraw_restricted_rays_box_type texel_box;
  float cvg;

  glyph_coord = vec2(fastuidraw_glyph_coord_x,
                     fastuidraw_glyph_coord_y);

  cvg = fastuidraw_restricted_rays_compute_coverage(fastuidraw_glyph_data_location,
                                                    glyph_coord,
                                                    dFdx(glyph_coord),
                                                    dFdy(glyph_coord),
                                                    vec2(fastuidraw_glyph_min_x, fastuidraw_glyph_min_y),
                                                    vec2(fastuidraw_glyph_max_x, fastuidraw_glyph_max_y),
                                                    texel_box);
  /**
  const float tol = 3.0;
  float tol_x = tol * fwidth(glyph_coord.x);
  float tol_y = tol * fwidth(glyph_coord.y);
  vec3 ff = vec3(0.0, 0.0, cvg);
  if (abs(glyph_coord.x - texel_box.min_point.x) < tol_x
      || abs(glyph_coord.x - texel_box.max_point.x) < tol_x
      || abs(glyph_coord.y - texel_box.min_point.y) < tol_y
      || abs(glyph_coord.y - texel_box.max_point.y) < tol_y)
    {
      //ff.x = 1.0;
    }

  if (length(z - glyph_coord) < tol * min(fwidth(glyph_coord.x), fwidth(glyph_coord.y)))
    {
      //ff.y = 1.0;
    }

  if (startw == 0)
    {
      // ff.xy = ff.yx;
    }

  return vec4(ff, 1.0);
  **/

  return vec4(1.0, 1.0, 1.0, cvg);
}
