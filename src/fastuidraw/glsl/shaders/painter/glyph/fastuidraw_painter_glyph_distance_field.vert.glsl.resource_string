/*!
 * \file fastuidraw_painter_glyph_distance_field.vert.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_distance_field.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

vec4
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 in_attrib0,
                        in uvec4 in_attrib1,
                        in uvec4 in_attrib2,
                        in uint shader_data_offset,
                        out int z_add)
{
  vec2 p;
  uvec3 texel;
  vec3 texelf;

  p = uintBitsToFloat(in_attrib0.xy);
  texel.x = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_X_BIT0,
                                    FASTUIDRAW_GLYPH_TEXEL_X_NUMBITS,
                                    in_attrib1.x);
  texel.y = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Y_BIT0,
                                    FASTUIDRAW_GLYPH_TEXEL_Y_NUMBITS,
                                    in_attrib1.x);
  texel.z = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Z_BIT0,
                                    FASTUIDRAW_GLYPH_TEXEL_Z_NUMBITS,
                                    in_attrib1.x);
  texelf = vec3(texel);

  #ifndef FASTUIDRAW_PAINTER_EMULATE_GLYPH_TEXEL_STORE_FLOAT
    {
      fastuidraw_glyph_tex_coord_x = texelf.x * fastuidraw_glyphTexelStore_size_reciprocal_x;
      fastuidraw_glyph_tex_coord_y = texelf.y * fastuidraw_glyphTexelStore_size_reciprocal_y;
    }
  #else
    {
      fastuidraw_glyph_tex_coord_x = texelf.x;
      fastuidraw_glyph_tex_coord_y = texelf.y;
    }
  #endif

  fastuidraw_glyph_tex_coord_layer = texelf.z;
  z_add = 0;
  return p.xyxy;
}
