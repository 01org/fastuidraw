/*!
 * \file fastuidraw_painter_glyph_curve_pair.vert.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_curve_pair.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


vec4
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 in_attrib0,
                        in uvec4 in_attrib1,
                        in uvec4 in_attrib2,
                        in uint shader_data_offset,
                        out int z_add)
{
  vec2 p;
  uvec3 texel0;
  vec3 texel0f, texel1f;
  uint geometry_location;

  p = uintBitsToFloat(in_attrib0.xy);

  geometry_location = in_attrib1.x;

  texel0.x = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_X_BIT0,
                                     FASTUIDRAW_GLYPH_TEXEL_X_NUMBITS,
                                     in_attrib1.y);
  texel0.y = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Y_BIT0,
                                     FASTUIDRAW_GLYPH_TEXEL_Y_NUMBITS,
                                     in_attrib1.y);
  texel0.z = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Z_BIT0,
                                     FASTUIDRAW_GLYPH_TEXEL_Z_NUMBITS,
                                     in_attrib1.y);

  texel0f = vec3(texel0);

  if ((uint(FASTUIDRAW_GLYPH_TEXEL_INVALID_MASK) & in_attrib1.z) == 0u)
    {
      uvec3 texel1;

      texel1.x = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_X_BIT0,
                                         FASTUIDRAW_GLYPH_TEXEL_X_NUMBITS,
                                         in_attrib1.z);
      texel1.y = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Y_BIT0,
                                         FASTUIDRAW_GLYPH_TEXEL_Y_NUMBITS,
                                         in_attrib1.z);
      texel1.z = FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_TEXEL_Z_BIT0,
                                         FASTUIDRAW_GLYPH_TEXEL_Z_NUMBITS,
                                         in_attrib1.z);
      texel1f = vec3(texel1);
    }
  else
    {
      texel1f.x = 0.0;
      texel1f.y = 0.0;
      texel1f.z = -1.0;
    }

  fastuidraw_glyph_tex_coord_x = texel0f.x;
  fastuidraw_glyph_tex_coord_y = texel0f.y;
  fastuidraw_glyph_tex_coord_layer = texel0f.z;
  fastuidraw_glyph_secondary_tex_coord_x = texel1f.x;
  fastuidraw_glyph_secondary_tex_coord_y = texel1f.y;
  fastuidraw_glyph_secondary_tex_coord_layer = texel1f.z;
  fastuidraw_glyph_geometry_data_location = geometry_location;

  z_add = 0;
  return p.xyxy;
}
