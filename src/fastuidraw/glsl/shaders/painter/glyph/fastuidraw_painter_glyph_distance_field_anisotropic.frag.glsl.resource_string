/*!
 * \file fastuidraw_painter_glyph_distance_field_anisotropic.frag.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_distance_field_anisotropic.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  /*
    varyings:
     fastuidraw_glyph_tex_coord_x
     fastuidraw_glyph_tex_coord_y
     fastuidraw_glyph_secondary_tex_coord_x
     fastuidraw_glyph_secondary_tex_coord_y
     fastuidraw_glyph_tex_coord_layer
     fastuidraw_glyph_secondary_tex_coord_layer
     fastuidraw_glyph_geometry_data_location

    glyph texel store at:
     fastuidraw_glyphTexelStoreUINT
     fastuidraw_glyphTexelStoreFLOAT

    glyph geometry store at:
     fastuidraw_fetch_glyph_data (macro)
   */

  float texel, dist, coverage;

  #ifndef FASTUIDRAW_PAINTER_EMULATE_GLYPH_TEXEL_STORE_FLOAT
    {
      texel = texture(fastuidraw_glyphTexelStoreFLOAT,
                      vec3(fastuidraw_glyph_tex_coord_x,
                           fastuidraw_glyph_tex_coord_y,
                           fastuidraw_glyph_tex_coord_layer)).r;
    }
  #else
    {
      ivec2 coord00, coord01, coord10, coord11;
      vec2 mixer;
      uint v00, v01, v10, v11;
      float f00, f10, f01, f11;
      float f0, f1;
      int layer;

      coord00 = ivec2(fastuidraw_glyph_tex_coord_x, fastuidraw_glyph_tex_coord_y);
      coord10 = coord00 + ivec2(1, 0);
      coord01 = coord00 + ivec2(0, 1);
      coord11 = coord00 + ivec2(1, 1);
      mixer = vec2(fastuidraw_glyph_tex_coord_x, fastuidraw_glyph_tex_coord_y) - vec2(coord00);
      layer = int(fastuidraw_glyph_tex_coord_layer);

      v00 = texelFetch(fastuidraw_glyphTexelStoreUINT, ivec3(coord00, layer), 0).r;
      v01 = texelFetch(fastuidraw_glyphTexelStoreUINT, ivec3(coord01, layer), 0).r;
      v10 = texelFetch(fastuidraw_glyphTexelStoreUINT, ivec3(coord10, layer), 0).r;
      v11 = texelFetch(fastuidraw_glyphTexelStoreUINT, ivec3(coord11, layer), 0).r;

      f00 = float(v00);
      f10 = float(v10);
      f01 = float(v01);
      f11 = float(v11);

      f0 = mix(f00, f01, mixer.y);
      f1 = mix(f10, f11, mixer.y);
      texel = mix(f0, f1, mixer.x) / 255.0;
    }
  #endif

  dist = 2.0 * texel - 1.0;
  coverage = fastuidraw_anisotropic_coverage(dist, dFdx(dist), dFdy(dist));
  return vec4(1.0, 1.0, 1.0, coverage);
}
