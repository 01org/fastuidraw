vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  float alpha;
  uint render_pass, dash_style;

  dash_style = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_dash_style_bit0,
                                       fastuidraw_stroke_sub_shader_dash_num_bits,
                                       sub_shader);

  render_pass = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_render_pass_bit0,
                                        fastuidraw_stroke_sub_shader_render_pass_num_bits,
                                        sub_shader);

  alpha = 1.0;
  if(dash_style != uint(fastuidraw_stroke_undashed))
    {
      float d, q, ff;
      uint interval_id;
      fastuidraw_dashed_stroking_params_header stroke_params;

      q = fastuidraw_compute_dash_interval(shader_data_offset, fastuidraw_stroking_distance,
                                           stroke_params, interval_id);

      if(dash_style == uint(fastuidraw_stroke_dashed_rounded_caps))
        {
          float y, r;
          r = stroke_params.width * 0.5;
          y = r * fastuidraw_stroking_on_boundary;
          if(q < r)
            {
              float f;
              f = r - sqrt(q * q + y * y);
              q = max(f, q);
            }
        }
      else if(dash_style == uint(fastuidraw_stroke_dashed_square_caps))
        {
          q += stroke_params.width * 0.5;
        }

      d = max(abs(q), fwidth(fastuidraw_stroking_distance));
      alpha = max(0.0, q / d);

      /* Rather than discarding on opaque passes, we could
         instead render in a single pass and be Ok with
         having anti-alias smudge sometimes occlude
         non-anti-aliased fragments. Doing this requires
         that means that we for anti-aliased rendering
         there is only a single rendering pass.

         Another approach is to have two passes where
         the 1st pass writes to a coverage buffer with
         a "blend mode" of MAX and the 2nd pass reads
         the coverage value, resets it to zero, and emits
         that as alpha. This approach, however requires
         either framebuffer_fetch OR fragment_shader_interlock.
       */
      if(render_pass == uint(fastuidraw_stroke_opaque_pass) && alpha < 1.0 - 1.0 / 255.0)
        {
          discard;
        }

      if(render_pass == uint(fastuidraw_stroke_non_aa) && q < 0.0)
        {
          discard;
        }
    }

  if(render_pass == uint(fastuidraw_stroke_aa_pass))
    {
      float dd, q;

      q = 1.0 - abs(fastuidraw_stroking_on_boundary);
      dd = max(q, fwidth(q));
      alpha *= q / dd;
    }

  return vec4(1.0, 1.0, 1.0, alpha);
}
