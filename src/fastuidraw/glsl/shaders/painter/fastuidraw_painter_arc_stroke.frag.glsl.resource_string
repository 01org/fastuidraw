/*!
 * \file fastuidraw_painter_arc_stroke.frag.glsl.resource_string
 * \brief file fastuidraw_painter_arc_stroke.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  float alpha = 1.0;
  int render_pass, dash_style;

  #ifndef FASTUIDRAW_STROKE_ONLY_SUPPORT_NON_AA
    {
      render_pass = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_render_pass_bit0,
                                                fastuidraw_stroke_sub_shader_render_pass_num_bits,
                                                sub_shader));
    }
  #else
    {
      render_pass = fastuidraw_stroke_non_aa;
    }
  #endif

  #ifdef FASTUIDRAW_STROKE_COVER_THEN_DRAW
    {
      if (render_pass == fastuidraw_stroke_aa_pass2)
        {
          return vec4(1.0, 1.0, 1.0, fastuidraw_clear_auxiliary());
        }
    }
  #endif

  float r, d, q, qw, ql, qlw;
  float S, R;

  r = length(vec2(fastuidraw_arc_stroking_relative_to_center_x,
                  fastuidraw_arc_stroking_relative_to_center_y));

  S = fastuidraw_arc_stroking_stroke_radius;
  R = fastuidraw_arc_stroking_arc_radius;
  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      if ((fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_arc_stroke_inverted_inner_region_mask)) != 0u)
        {
          S = fastuidraw_arc_stroking_stroke_radius - fastuidraw_arc_stroking_arc_radius;
          R = 0.0;
        }
    }
  #endif

  q = S - abs(r - R);
  qw = fwidth(q);
  d = max(abs(q), qw);

  ql = 1.0 - fastuidraw_arc_stroking_relative_to_center_x;
  qlw = fwidth(ql);

  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      float theta, thetaw, dist, distw, bd, bdw;

      dash_style = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_dash_style_bit0,
                                               fastuidraw_stroke_sub_shader_dash_style_num_bits,
                                               sub_shader));

      theta = atan(fastuidraw_arc_stroking_relative_to_center_y,
                   fastuidraw_arc_stroking_relative_to_center_x);
      thetaw = fwidth(theta);
      dist = fastuidraw_arc_stroking_distance;
      distw = fwidth(fastuidraw_arc_stroking_distance);

      if ((fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_stroke_gauranteed_to_be_covered_mask)) == 0u)
        {
          if (fastuidraw_arc_stroking_arc_radius > -0.5)
            {
              if ((fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_arc_stroke_negative_arc_angle_mask)) != 0u)
                {
                  theta = -theta;
                }
              if ((fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_stroke_gauranteed_to_be_covered_mask)) != 0u)
                {
                  theta = -theta;
                }
              float recip = 1.0 / fastuidraw_arc_stroking_stroke_radius;

              dist += theta * fastuidraw_arc_stroking_arc_radius;
              distw = thetaw * fastuidraw_arc_stroking_arc_radius;
              bd = 1.0 - q * recip;
              bdw = qw * recip;
            }
          else
            {
              bd = fastuidraw_arc_stroking_relative_to_center_x;
              bdw = qlw;
            }

          bool dont_anti_alias_dash_boundary, skip_lookup;

          skip_lookup =
            (fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_stroke_skip_dash_interval_lookup_mask)) != 0u;

          dont_anti_alias_dash_boundary = (render_pass == fastuidraw_stroke_non_aa)
            || (fastuidraw_arc_stroking_dash_bits & uint(fastuidraw_stroke_distance_constant)) != 0u;

          if (dash_style == fastuidraw_stroke_dashed_flat_caps)
            {
              alpha = fastuidraw_stroke_compute_dash_coverage(shader_data_offset, dist, distw,
                                                              skip_lookup, dont_anti_alias_dash_boundary);
            }
          else
            {
              alpha = fastuidraw_stroke_compute_dash_coverage(dash_style == fastuidraw_stroke_dashed_rounded_caps,
                                                              dash_style == fastuidraw_stroke_dashed_square_caps,
                                                              shader_data_offset,
                                                              dist, distw, bd, bdw,
                                                              fastuidraw_arc_stroking_distance_sub_edge_start,
                                                              fastuidraw_arc_stroking_distance_sub_edge_end,
                                                              skip_lookup, dont_anti_alias_dash_boundary);
            }

          #if !defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
            {
              if (render_pass == fastuidraw_stroke_aa_pass1 && alpha < 1.0 - 1.0 / 255.0)
                {
                  alpha = 0.0;
                }
            }
          #endif

           if (render_pass == fastuidraw_stroke_non_aa)
             {
               if (alpha < 1.0 - 1.0 / 255.0)
                 {
                   FASTUIDRAW_DISCARD;
                 }
               else
                 {
                   alpha = 1.0;
                 }
             }
        }
    }
  #endif

  /* A negtive arc_radius indicates that it is a segment */
  if (fastuidraw_arc_stroking_arc_radius > -0.5)
    {
      if (render_pass != fastuidraw_stroke_non_aa)
        {
          alpha *= max(0.0, q / d);
        }
      else
        {
          if (q < 0.0)
            {
              FASTUIDRAW_DISCARD;
            }
          alpha = 1.0;
        }

    }
  else
    {
      if (render_pass != fastuidraw_stroke_non_aa)
        {
          float dd;
          q = 1.0;
          dd = max(ql, qlw);
          alpha *= ql / dd;
        }
      else
        {
          alpha = 1.0;
        }
    }

  #ifdef FASTUIDRAW_STROKE_COVER_THEN_DRAW
    {
      if (render_pass == fastuidraw_stroke_aa_pass1)
        {
          fastuidraw_max_auxiliary(alpha);
          alpha = 0.0;
        }
    }
  #elif defined(FASTUIDRAW_STROKE_DASHED)
    {
      if (render_pass != fastuidraw_stroke_aa_pass2 && alpha < 1.0 - 1.0 / 255.0)
        {
          FASTUIDRAW_DISCARD;
        }
    }
  #else
    {
      if (render_pass != fastuidraw_stroke_aa_pass2 && alpha < 1.0 - 1.0 / 255.0)
        {
          FASTUIDRAW_DISCARD;
        }
    }
  #endif

  return vec4(1.0, 1.0, 1.0, alpha);
}
