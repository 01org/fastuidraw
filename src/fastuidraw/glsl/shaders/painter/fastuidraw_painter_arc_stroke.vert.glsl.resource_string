vec4
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 uprimary_attrib,
                        in uvec4 usecondary_attrib,
                        in uvec4 uint_attrib,
                        in uint shader_data_offset,
                        out int z_add)
{
  vec4 primary_attrib, secondary_attrib;

  primary_attrib = uintBitsToFloat(uprimary_attrib);
  secondary_attrib = uintBitsToFloat(usecondary_attrib);

  uint render_pass;
  bool stroke_width_pixels;
  const float anti_alias_thickness = 1.5;

  #ifndef FASTUIDRAW_STROKE_ONLY_SUPPORT_NON_AA
    {
      render_pass = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_render_pass_bit0,
                                            fastuidraw_stroke_sub_shader_render_pass_num_bits,
                                            sub_shader);
    }
  #else
    {
      render_pass = uint(fastuidraw_stroke_non_aa);
    }
  #endif

  vec2 vector_from_center, p;
  vec2 position, center, offset_direction;
  float scale_factor, radius, arc_angle;

  float distance_from_edge_start, distance_from_contour_start;
  float total_edge_length, total_open_contour_length, total_closed_contour_length;

  float stroke_radius;
  int on_boundary, offset_type;
  uint point_packed_data;

  #ifdef FASTUIDRAW_STROKE_DASHED
  fastuidraw_dashed_stroking_params_header stroke_params;
  mat2 rotate_by = mat2(1.0, 0.0, 0.0, 1.0);
  fastuidraw_read_dashed_stroking_params_header(shader_data_offset, stroke_params);
  #else
  fastuidraw_stroking_params stroke_params;
  fastuidraw_read_stroking_params(shader_data_offset, stroke_params);
  #endif

  position = primary_attrib.xy;
  offset_direction = primary_attrib.zw;
  radius = secondary_attrib.z;
  arc_angle = secondary_attrib.w;
  distance_from_edge_start = secondary_attrib.x;
  distance_from_contour_start = secondary_attrib.y;
  total_edge_length = uintBitsToFloat(uint_attrib.y);
  total_open_contour_length = uintBitsToFloat(uint_attrib.z);
  total_closed_contour_length = uintBitsToFloat(uint_attrib.w);
  point_packed_data = uint_attrib.x;

  offset_type = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_arc_stroke_offset_type_bit0,
                                            fastuidraw_arc_stroke_offset_type_num_bits,
                                            point_packed_data));
  on_boundary = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_arc_stroke_boundary_bit,
                                            1,
                                            point_packed_data));

  stroke_width_pixels = (stroke_params.radius < 0.0);
  stroke_radius = abs(stroke_params.radius);
  scale_factor = float(on_boundary) * stroke_radius;

  fastuidraw_arc_stroking_stroke_radius = stroke_radius;
  fastuidraw_arc_stroking_arc_radius = radius;
  center = position - radius * offset_direction;

  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      float edge_start, edge_end, stroke_distance;
      bool is_constant_distance, is_edge_end;
      fastuidraw_dashed_struct_base base, base_start, base_end;
      int dash_style;

      dash_style = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_dash_style_bit0,
                                               fastuidraw_stroke_sub_shader_dash_style_num_bits,
                                               sub_shader));

      stroke_distance = distance_from_contour_start + stroke_params.dash_offset;
      fastuidraw_dashed_helper_vert_base(stroke_distance, shader_data_offset, stroke_params, base);
      fastuidraw_arc_stroking_distance = base.d;

      edge_start = distance_from_contour_start - distance_from_edge_start + stroke_params.dash_offset;
      fastuidraw_dashed_helper_vert_base(edge_start, shader_data_offset, stroke_params, base_start);
      fastuidraw_arc_stroking_distance_sub_edge_start = (base_start.s < 0.0) ? base_start.interval_end : edge_start;

      edge_end = edge_start + total_edge_length;
      fastuidraw_dashed_helper_vert_base(edge_end, shader_data_offset, stroke_params, base_end);
      fastuidraw_arc_stroking_distance_sub_edge_end = (base_end.s < 0.0) ? base_end.interval_begin : edge_end;

      is_edge_end = (point_packed_data & uint(fastuidraw_arc_stroke_end_segment_mask)) != 0u;
      is_constant_distance = (point_packed_data & uint(fastuidraw_arc_stroke_distance_constant_on_primitive_mask)) != 0u;
      if (offset_type == fastuidraw_arc_stroke_dashed_capper)
        {
          fastuidraw_arc_stroking_dash_bits = uint(fastuidraw_stroke_skip_dash_interval_lookup_mask);

          fastuidraw_arc_stroking_distance = (is_edge_end) ?
            base.interval_begin - base.d :
            base.d - base.interval_end;

          if (base.s < 0.0
              && dash_style != fastuidraw_stroke_dashed_flat_caps
              && (point_packed_data & uint(fastuidraw_arc_stroke_extend_mask)) != 0u)
            {
              float d = 0.0;

              if (is_edge_end)
                {
                  if (stroke_radius + base.interval_begin > base.d
                      && base.interval_begin > edge_start)
                    {
                      d = stroke_radius + base.interval_begin - base.d;
                      position += d * secondary_attrib.zw;
                      fastuidraw_arc_stroking_distance = -stroke_radius;
                    }
                }
              else
                {
                  if (base.interval_end - stroke_radius < base.d
                      && base.interval_end < edge_end)
                    {
                      d = base.d - base.interval_end + stroke_radius;
                      position += d * secondary_attrib.zw;
                      fastuidraw_arc_stroking_distance = -stroke_radius;
                    }
                }
            }
        }
      else if (is_constant_distance)
        {
          fastuidraw_arc_stroking_dash_bits = uint(fastuidraw_stroke_distance_constant);
          if ((point_packed_data & uint(fastuidraw_arc_stroke_join_mask)) != 0u)
            {
              fastuidraw_arc_stroking_dash_bits |= uint(fastuidraw_stroke_gauranteed_to_be_covered_mask);
              if (base.s < 0.0)
                {
                  offset_type = fastuidraw_arc_stroke_line_segment;
                  position = center;
                  scale_factor = 0.0;
                }
            }
        }
      else
        {
          float delta_mag;
          bool collapse;

          fastuidraw_arc_stroking_dash_bits = 0u;
          fastuidraw_arc_stroking_distance = stroke_distance;
          if (offset_type != fastuidraw_arc_stroke_line_segment)
            {
              delta_mag = abs(arc_angle) * radius;
            }
          else
            {
              delta_mag = length(secondary_attrib.zw);
            }

          if (is_edge_end)
            {
              collapse = (base.interval_begin < base.d - delta_mag && base.s < 0.0);
            }
          else
            {
              collapse = (base.interval_end > base.d + delta_mag && base.s < 0.0);
            }

          if (collapse && dash_style == fastuidraw_stroke_dashed_flat_caps)
            {
              if (offset_type != fastuidraw_arc_stroke_line_segment)
                {
                  offset_type = fastuidraw_arc_stroke_line_segment;
                  position = center;
                  scale_factor = 0.0;
                }
              else
                {
                  scale_factor = 0.0;
                }
            }
          else if (offset_type != fastuidraw_arc_stroke_line_segment)
            {
              if (arc_angle < 0.0)
                {
                  fastuidraw_arc_stroking_dash_bits |= uint(fastuidraw_arc_stroke_negative_arc_angle_mask);
                }

              if (is_edge_end)
                {
                  fastuidraw_arc_stroking_distance = stroke_distance - abs(arc_angle) * radius;
                }

              /* the fragment shader just does radius * atan() to compute the
               * distance from the start of the arc-edge. As such, we need to
               * rotate back by the start angle.
               */
              rotate_by =
                mat2(offset_direction.x, -offset_direction.y,
                     offset_direction.y, offset_direction.x);

              if ((point_packed_data & uint(fastuidraw_arc_stroke_end_segment_mask)) != 0u)
                {
                  /* we rotated by the offset_direction, which means we rotated
                   * back by the end-angle, rotate forward by arc-angle to get
                   * a net rotation of backwards by start angle
                   */
                  mat2 tmp;
                  float c, s;

                  c = cos(arc_angle);
                  s = sin(arc_angle);
                  tmp = mat2(c, s, -s, c);
                  rotate_by = tmp * rotate_by;
                }
            }
        }
    }
  #endif

  if(offset_type == fastuidraw_arc_stroke_arc_point_on_path_origin)
    {
      if (stroke_radius > radius)
        {
          scale_factor = -radius;
        }
      else
        {
          scale_factor = 0.0;
        }
    }

  if (offset_type == fastuidraw_arc_stroke_stroking_boundary_origin)
    {
      if (stroke_radius > radius)
        {
          /* make point at the center and change the behavior to be like
           * an arc-join centered at the same location with stroking
           * radius as stroke_radius - radius
           */
          scale_factor = -radius;
          fastuidraw_arc_stroking_arc_radius = 0.0;
          fastuidraw_arc_stroking_stroke_radius = stroke_radius - radius;
        }
      else
        {
          offset_type = fastuidraw_arc_stroke_stroking_boundary;
        }
    }

  if (offset_type == fastuidraw_arc_stroke_stroking_boundary
      && (point_packed_data & uint(fastuidraw_arc_stroke_inner_stroking_mask)) != 0u)
    {
      if (stroke_radius < radius)
        {
          scale_factor = -scale_factor;
          /* collapse beyond_inner_stroking_boundary to be the same
           * location as inner_stroking_boundary since they are only
           * needed/used when the stroke_radius > radius.
           */
          point_packed_data &= ~uint(fastuidraw_arc_stroke_beyond_boundary_mask);
        }
      else
        {
          position = center;
          scale_factor = stroke_radius - radius;
          offset_direction = -offset_direction;

          /* change the behavior to be like an arc-join centered at the
           * same location with stroknig radius as stroke_radius - radius
           */
          fastuidraw_arc_stroking_arc_radius = 0.0;
          fastuidraw_arc_stroking_stroke_radius = stroke_radius - radius;
        }
    }

  p = position + scale_factor * offset_direction;

  if (offset_type == fastuidraw_arc_stroke_stroking_boundary
      && (point_packed_data & uint(fastuidraw_arc_stroke_beyond_boundary_mask)) != 0u)
    {
      float half_angle, L, D, c, s;
      vec2 v;

      half_angle = 0.5 * arc_angle;
      if ((point_packed_data & uint(fastuidraw_arc_stroke_end_segment_mask)) != 0u)
        {
          half_angle = -half_angle;
        }

      c = cos(half_angle);
      s = sin(half_angle);
      v.x = c * offset_direction.x - s * offset_direction.y;
      v.y = s * offset_direction.x + c * offset_direction.y;

      L = 1.0 - c;
      D = (fastuidraw_arc_stroking_arc_radius + fastuidraw_arc_stroking_stroke_radius) * L;
      p += D * v;

      /* move p an additional amount so that the edge formed
       * from the beyond boudnary points is atleast one pixel
       * from the stroking-arc boundary.
       */
      vec3 clip_p, clip_direction;
      float d;

      clip_p = fastuidraw_item_matrix * vec3(p, 1.0);
      clip_direction = fastuidraw_item_matrix * vec3(v, 0);
      d = fastuidraw_local_distance_from_pixel_distance(1.0, clip_p, clip_direction);
      p += d / c * v;
    }

  vector_from_center = p - center;
  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      vector_from_center = rotate_by * vector_from_center;
    }
  #endif

  fastuidraw_arc_stroking_relative_to_center_x = vector_from_center.x;
  fastuidraw_arc_stroking_relative_to_center_y = vector_from_center.y;

  if (offset_type == fastuidraw_arc_stroke_line_segment
      || offset_type == fastuidraw_arc_stroke_bevel_segment
      || offset_type == fastuidraw_arc_stroke_dashed_capper)
    {
      fastuidraw_arc_stroking_arc_radius = -1.0f; //indicate to frag shader to skip arc-coverage
      fastuidraw_arc_stroking_relative_to_center_x = float(on_boundary);
    }

  #if defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
    {
      if (render_pass != uint(fastuidraw_stroke_non_aa))
        {
          z_add = 0;
        }
      else
        {
          z_add = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_arc_stroke_depth_bit0,
                                              fastuidraw_arc_stroke_depth_num_bits,
                                              point_packed_data));
        }
    }
  #else
    {
      z_add = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_arc_stroke_depth_bit0,
                                          fastuidraw_arc_stroke_depth_num_bits,
                                          point_packed_data));
    }
  #endif

  return vec4(p, p);
}
