/*!
 * \file fastuidraw_painter_brush.vert.glsl.resource_string
 * \brief file fastuidraw_painter_brush.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


void
fastuidraw_gl_vert_brush_main(in uint sub_shader, inout uint shader_data_block, in vec2 in_p)
{
  uint gradient_type;
  FASTUIDRAW_LOCAL(fastuidraw_brush_header) header;
  FASTUIDRAW_LOCAL(fastuidraw_brush_gradient) gradient;
  FASTUIDRAW_LOCAL(fastuidraw_brush_repeat_window) repeat_window;
  vec2 p, color_rg, color_ba;
  float color_stop_recip;

  p = in_p;

  /* Directly unpack brush data into brush varyings */
  FASTUIDRAW_LOCAL(fastuidraw_read_brush_header)(shader_data_block, header);
  shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_header_size)();
  color_rg = unpackHalf2x16(header.red_green);
  color_ba = unpackHalf2x16(header.blue_alpha);
  fastuidraw_brush_color_x = color_rg.x;
  fastuidraw_brush_color_y = color_rg.y;
  fastuidraw_brush_color_z = color_ba.x;
  fastuidraw_brush_color_w = color_ba.y;
  fastuidraw_brush_features = header.features;

  gradient_type = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_gradient_type_bit0,
                                          fastuidraw_brush_gradient_type_num_bits,
                                          header.features);
  if (gradient_type == fastuidraw_brush_radial_gradient_type)
    {
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_radial_gradient_data)(shader_data_block, gradient);
    }
  else if (gradient_type == fastuidraw_brush_linear_gradient_type
           || gradient_type == fastuidraw_brush_sweep_gradient_type)
    {
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_linear_or_sweep_gradient_data)(shader_data_block, gradient);
    }
  else
    {
      gradient.p0 = gradient.p1 = vec2(0.0, 0.0);
      gradient.r0 = gradient.r1 = 0.0;
      gradient.color_stop_sequence_length = 1.0;
      gradient.color_stop_sequence_xy = vec2(0.0, 0.0);
    }

  if ((header.features & uint(fastuidraw_brush_repeat_window_mask)) != 0u)
    {
      FASTUIDRAW_LOCAL(fastuidraw_read_brush_repeat_window)(shader_data_block, repeat_window);
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_repeat_window_size)();
    }
  else
    {
      repeat_window.xy = vec2(0.0, 0.0);
      repeat_window.wh = vec2(1.0, 1.0);
    }

  fastuidraw_brush_repeat_window_x = repeat_window.xy.x;
  fastuidraw_brush_repeat_window_y = repeat_window.xy.y;
  fastuidraw_brush_repeat_window_w = repeat_window.wh.x;
  fastuidraw_brush_repeat_window_h = repeat_window.wh.y;

  fastuidraw_brush_gradient_p0_x = gradient.p0.x;
  fastuidraw_brush_gradient_p0_y = gradient.p0.y;
  fastuidraw_brush_gradient_p1_x = gradient.p1.x;
  fastuidraw_brush_gradient_p1_y = gradient.p1.y;
  fastuidraw_brush_gradient_r0 = gradient.r0;
  fastuidraw_brush_gradient_r1 = gradient.r1;

  color_stop_recip = fastuidraw_colorStopAtlas_size_reciprocal;
  fastuidraw_brush_color_stop_length = color_stop_recip * gradient.color_stop_sequence_length;
  fastuidraw_brush_color_stop_x = color_stop_recip * gradient.color_stop_sequence_xy.x;
  fastuidraw_brush_color_stop_y = gradient.color_stop_sequence_xy.y;

  if ((header.features & uint(fastuidraw_brush_transformation_matrix_mask)) != 0u)
    {
      mat2 m;
      FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_matrix)(shader_data_block, m);
      shader_data_block = FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_matrix_size)();
      p = m * p;
    }

  if ((header.features & uint(fastuidraw_brush_transformation_translation_mask)) != 0u)
    {
      vec2 q;
      FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_translation)(shader_data_block, q);
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_translation_size)();
      p += q;
    }

  if ((header.features & fastuidraw_brush_image_mask) != 0u)
    {
      uint image_sub_shader;

      image_sub_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_image_bit0,
                                                 fastuidraw_brush_image_num_bits,
                                                 header.features);
      image_brush(image_sub_shader, shader_data_block, p);
    }

  fastuidraw_brush_p_x = p.x;
  fastuidraw_brush_p_y = p.y;
}
