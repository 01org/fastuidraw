/*!
 * \file fastuidraw_painter_external_texture.glsl.resource_string
 * \brief file fastuidraw_painter_external_texture.glsl.resource_string
 *
 * Copyright 2019 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

vec4
fastuidraw_nearest_filter_external_texture(in vec2 texel_coord, in float lod)
{
  vec2 adjusted;
  int L;

  L = int(ceil(lod));
  adjusted = texel_coord / float(1 << L);
  return texelFetch(fastuidraw_external_texture, ivec2(adjusted), L);
}

vec4
fastuidraw_linear_filter_external_texture(in vec2 texel_coord, in float lod)
{
  vec2 recip_sz = 1.0 / vec2(textureSize(fastuidraw_external_texture, 0));
  return textureLod(fastuidraw_external_texture, texel_coord * recip_sz, lod);
}

vec4
fastuidraw_cubic_filter_external_texture(in vec2 texel_coord)
{
  vec2 recip_sz = 1.0 / vec2(textureSize(fastuidraw_external_texture, 0));
  vec2 fract_texel_coord, linear_weight;
  vec4 x_weights, y_weights;
  vec4 corner_coords, weight_sums, texture_coords;
  vec4 t00, t10, t01, t11;

  texel_coord -= vec2(0.5, 0.5);
  fract_texel_coord = fract(texel_coord);
  texel_coord -= fract_texel_coord;

  x_weights = fastuidraw_image_cubic_weights(fract_texel_coord.x);
  y_weights = fastuidraw_image_cubic_weights(fract_texel_coord.y);

  corner_coords = vec4(texel_coord.x - 0.5, texel_coord.x + 1.5,
                       texel_coord.y - 0.5, texel_coord.y + 1.5);
  weight_sums = vec4(x_weights.x + x_weights.y, x_weights.z + x_weights.w,
                     y_weights.x + y_weights.y, y_weights.z + y_weights.w);

  texture_coords = corner_coords + vec4(x_weights.y, x_weights.w, y_weights.y, y_weights.w) / weight_sums;
  texture_coords *= recip_sz.xyxy;

  t00 = textureLod(fastuidraw_external_texture, texture_coords.xz, 0.0);
  t10 = textureLod(fastuidraw_external_texture, texture_coords.yz, 0.0);
  t01 = textureLod(fastuidraw_external_texture, texture_coords.xw, 0.0);
  t11 = textureLod(fastuidraw_external_texture, texture_coords.yw, 0.0);

  linear_weight.x = weight_sums.y / (weight_sums.x + weight_sums.y);
  linear_weight.y = weight_sums.w / (weight_sums.z + weight_sums.w);

  return mix(mix(t00, t10, linear_weight.x),
             mix(t01, t11, linear_weight.x),
             linear_weight.y);
}
