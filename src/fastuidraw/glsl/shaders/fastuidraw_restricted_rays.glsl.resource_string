/*!
 * \file fastuidraw_restricted_rays.glsl.resource_string
 * \brief file fastuidraw_restricted_rays.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

/* must have the macro/function
 *
 *  FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(X)
 *
 * that returns a single 32-bit uint value at index X of
 * a large array of 32-bit uint values storing the data
 */

struct fastuidraw_restricted_rays_transformation
{
  vec2 translation;
  vec2 r_vector, jr_vector;
  float reference_location, orientation;
};

struct fastuidraw_restricted_rays_curve_type
{
  vec2 p1, p2, p3;
  bool is_quadratic;
};

struct fastuidraw_restricted_rays_box_type
{
  vec2 min_point, max_point, center_point, size;
};

struct fastuidraw_restricted_rays_distance_type
{
  float distance_increment;
  float distance_decrement;
};

struct fastuidraw_restricted_rays_winding_sample_type
{
  int reference_winding;
  vec2 reference_position;
};

void
fastuidraw_restricted_rays_init_distance(out fastuidraw_restricted_rays_distance_type nv)
{
  /* Just initialize to some value that is large (strictly speaking
   * we only need a value greater than 0.5, but make it larger
   * for debug renders to be useful).
   */
  nv.distance_increment = nv.distance_decrement = 120.0;
}

void
fastuidraw_restricted_rays_update_distance(in float dist, in bool is_increment,
                                           inout fastuidraw_restricted_rays_distance_type nv)
{
  /* We are assuming that there are no cancelling curves in the glyph data.
   * The class GlyphRenderDataRestrictedRays has code to detect most forms
   * of cancelling curves (it detects partially overlapping vertical and
   * horizontal curves along with perfectly overlapping general curves).
   */
  if (is_increment)
    {
      nv.distance_increment = min(nv.distance_increment, dist);
    }
  else
    {
      nv.distance_decrement = min(nv.distance_decrement, dist);
    }
}

bool
fastuidraw_restricted_rays_is_increment(in vec2 p, in vec2 dp)
{
  float det;

  /* The vector from the origin to the point is given by the point value, p.
   * the direction of the curve is given by dp. When crossing the curve in the
   * direction from the origin to p, the winding is incremented if the pair
   * (p, dp) forms a 2x2 matrix that has positive determinant and decrements
   * otherwise.
   */
  det = p.x * dp.y - p.y * dp.x;
  return det > 0.0;
}


void
fastuidraw_restricted_rays_update_distance(in vec2 p, in bool is_increment,
                                           inout fastuidraw_restricted_rays_distance_type nv)
{
  float d;

  d = abs(p.x) + abs(p.y);
  fastuidraw_restricted_rays_update_distance(d, is_increment, nv);
}

void
fastuidraw_restricted_rays_update_distance(in vec2 p, in vec2 dp,
                                           inout fastuidraw_restricted_rays_distance_type nv)
{
  fastuidraw_restricted_rays_update_distance(p, fastuidraw_restricted_rays_is_increment(p, dp), nv);
}

uint
fastuidaw_restricted_rays_compute_box(in vec2 p,
                                      in vec2 bb_box_min, in vec2 bb_box_max,
                                      in uint data_location,
                                      out fastuidraw_restricted_rays_box_type box,
                                      out uint curve_list,
                                      out uint num_curves)
{
  uint v, offset;

  box.min_point = bb_box_min;
  box.max_point = bb_box_max;

  offset = data_location;
  v = FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(offset);

  while((v & fastuidraw_restricted_rays_hierarchy_node_mask) != 0u)
    {
      uint c, bit0;
      float split_pt;
      bool take_max_choice;

      c = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_hierarchy_split_coord_bit, 1u, v);
      if (c == 0u)
        {
          split_pt = 0.5 * (box.min_point.x + box.max_point.x);
          take_max_choice = (p.x > split_pt);
          box.min_point.x = (take_max_choice) ? split_pt : box.min_point.x;
          box.max_point.x = (take_max_choice) ? box.max_point.x : split_pt;
        }
      else
        {
          split_pt = 0.5 * (box.min_point.y + box.max_point.y);
          take_max_choice = (p.y > split_pt);
          box.min_point.y = (take_max_choice) ? split_pt : box.min_point.y;
          box.max_point.y = (take_max_choice) ? box.max_point.y : split_pt;
        }

      bit0 = (take_max_choice) ?
        fastuidraw_restricted_rays_hierarchy_child1_bit:
        fastuidraw_restricted_rays_hierarchy_child0_bit;
      offset = FASTUIDRAW_EXTRACT_BITS(bit0,
                                       fastuidraw_restricted_rays_hierarchy_child_num_bits,
                                       v);
      offset += data_location;
      v = FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(offset);
    }

  box.size = box.max_point - box.min_point;
  box.center_point = 0.5 * (box.min_point + box.max_point);
  curve_list = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_hierarchy_curve_list_bit0,
                                       fastuidraw_restricted_rays_hierarchy_curve_list_num_bits,
                                       v);
  num_curves = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_hierarchy_curve_list_size_bit0,
                                       fastuidraw_restricted_rays_hierarchy_curve_list_size_num_bits,
                                       v);

  return offset + 1u;
}

ivec2
fastuidraw_restricted_rays_unpack_point(in uint ptr)
{
  uint pt_packed;
  uvec2 pt_u;
  ivec2 pt_i;

  pt_packed = FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(ptr);

  pt_u.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_point_x_coordinate_bit0,
                                   fastuidraw_restricted_rays_point_coordinate_num_bits,
                                   pt_packed);
  pt_u.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_point_y_coordinate_bit0,
                                   fastuidraw_restricted_rays_point_coordinate_num_bits,
                                   pt_packed);
  pt_i = ivec2(pt_u);

  return pt_i;
}

void
fastuidraw_restricted_rays_compute_transformation(in vec2 frag_point,
                                                  in vec2 frag_point_dx,
                                                  in vec2 frag_point_dy,
                                                  in vec2 reference_point,
                                                  out fastuidraw_restricted_rays_transformation tr)
{
  /* We need to create a matrix M that has the following properties:
   *   1. M(q) = (V, 0) where q = reference_point - frag_point
   *                    and V can be any non-negative value
   *   2. M * F is a rotation where F is the 2x2 matrix giving the
   *            the local transformation from window coordinates to
   *            glyph coordinates.
   *
   *
   * The computation for M is as follows:
   *   Let Q be st F(Q) = q.
   *   Let T be st <T, Q> = 0, i.e. T = J(Q) where J(x, y) = (-y, x)
   *   Let t = J(F(T))
   *
   * thus,
   *
   *   t = (J * F * J * Finverse)(q)
   *
   * The matrix F is given by
   *
   *   | frag_point_dx.x frag_point_dy.x |
   *   | frag_point_dx.y frag_point_dy.y |
   *
   * For any matrix K
   *
   *  | a b |
   *  | c d |
   *
   * the matrix J * K * J * Kinverse is given by
   *
   * | -(cc + dd) * R   (ac + bd) * R |
   * |  (ac + bd) * R  -(aa + bb) * R |
   *
   * where R is 1 / det(K). Since we are only looking for
   * a vector whose pre-image on window coordinates is
   * perpindicular to q, we can skip the divide by R.
   */

  vec2 q, top_row, bottom_row, em;
  float a, b, c, d;

  tr.translation = frag_point;
  q = reference_point - frag_point;
  tr.jr_vector.x = -q.y;
  tr.jr_vector.y = q.x;

  a = frag_point_dx.x;
  b = frag_point_dy.x;
  c = frag_point_dx.y;
  d = frag_point_dy.y;

  top_row.x = -(c * c + d * d);
  top_row.y = bottom_row.x = (a * c + b * d);
  bottom_row.y = -(a * a + b * b);

  tr.r_vector.x = dot(top_row, q);
  tr.r_vector.y = dot(bottom_row, q);

  /* em represents the normalization so that the pre-image of r_vector
   * and jr_vector in screen coordinates has length 1.
   */
  em.x = abs(dot(tr.r_vector, frag_point_dx)) + abs(dot(tr.r_vector, frag_point_dy));
  em.y = abs(dot(tr.jr_vector, frag_point_dx)) + abs(dot(tr.jr_vector, frag_point_dy));

  /* Prevent divide by zero. if em.x or em.y is very small, that means
   * that on screen the x (repsectively y) local coordinate axis is
   * severely stretched. Since the sample point is to be reasonably
   * far from any curve, clamping em.x and em.y away from zero will
   * not have effect on coverage computation.
   */
  const float min_em = 1e-7;
  em.x = max(em.x, min_em);
  em.y = max(em.y, min_em);

  tr.r_vector /= em.x;
  tr.jr_vector /= em.y;
  tr.reference_location = dot(tr.r_vector, q);

  if (tr.reference_location < 0.0)
    {
      /* we need to send q to (V, 0) where
       * V is positive.
       */
      tr.r_vector = -tr.r_vector;
      tr.reference_location = -tr.reference_location;
    }

  float det;

  det = (tr.r_vector.x * tr.jr_vector.y - tr.r_vector.y * tr.jr_vector.x);
  /* we need the transformation to be orientation preserving.
   * The only requirement we have on jr_vector is that
   * dot(jr_vector, q) is zero, so negate jr_vector to get the
   * transformation matrix to be orientation preserving.
   */
  if (det < 0.0)
    {
      tr.jr_vector = -tr.jr_vector;
    }
}

vec2
fastuidraw_restricted_rays_apply_transformation(in vec2 p,
                                                in fastuidraw_restricted_rays_transformation tr)
{
  p -= tr.translation;
  return vec2(dot(tr.r_vector, p),
              dot(tr.jr_vector, p));
}

uint
fastuidraw_restricted_rays_compute_code(in float y1, in float y2, in float y3)
{
  uint code;

  /* The purpose of the algorithm is to determine in a numerically stable
   * way if a an intersection of the quadratic parametric curve against
   * y = 0 is in the paremtirc range [0, 1]. What is does is to examine
   * which of the control points are above the line y = 0. There are 8
   * possibilities each yielding a result of weather or not to use the
   * first and/or second intersection of the quadratic curve against the
   * line y = 0. Rather than have a massive cumberson switch-case statement
   * we simply store a single 16-bit value where 2-bits are given for each
   * of the cases. The shift by the value of code is choosing which of
   * those 2-bits and the bit-wise and by 3 is to make the test for the
   * second bit from checking if a bit if up to just testing if the value
   * is strictly greater than 1.
   */
  code = (y1 > 0.0 ? 2u : 0u)
    + (y2 > 0.0 ? 4u : 0u)
    + (y3 > 0.0 ? 8u : 0u);

  return (0x2E74u >> code) & 0x3u;
}

int
fastuidraw_restricted_rays_compute_winding_contribution(in fastuidraw_restricted_rays_curve_type curve,
                                                        in fastuidraw_restricted_rays_transformation tr,
                                                        inout fastuidraw_restricted_rays_distance_type dst)
{
  vec2 A, B, C;
  int R = 0;
  uvec2 code;

  curve.p1 = fastuidraw_restricted_rays_apply_transformation(curve.p1, tr);
  curve.p2 = fastuidraw_restricted_rays_apply_transformation(curve.p2, tr);
  curve.p3 = fastuidraw_restricted_rays_apply_transformation(curve.p3, tr);

  A = curve.p1 - 2.0 * curve.p2 + curve.p3;
  B = curve.p1 - curve.p2;
  C = curve.p1;

  /* The winding number computation comes from the paper
   * "GPU-Centered Font Rendering Directly from Glyph Outlines"
   * by Eric Lengyel. The reason why the winding at t1 is always
   * decremented and t2 is always incremented comes from the
   * following:
   *
   *  y(t) = C + Bt + At^2
   *
   * which factors into (assuming there are real roots t1 and t2):
   *
   *  y(t) = A(t - t1)(t- t2)
   *
   * whose derivative is
   *
   * y'(t) = A( (t - t1) + (t - t2) )
   *
   * the two cases to examine are A > 0 and A < 0.
   *   case A > 0: then t1 <= t2, thus y'(t1) = A(t - t2) < 0 and y'(t2) = A(t2 - t1) > 0
   *   case A < 0: then t1 >= t2, thus y'(t1) = A(t - t2) < 0 and y'(t2) = A(t2 - t1) > 0
   *
   * That the winding change when going from the origin to point of
   * intersection is decremented at t1 and incremented at t2, but we
   * need the winding number change when going from the reference
   * point to the origin, thus it is incremented at t1 and decremented
   * at t2.
   */
  code.x = fastuidraw_restricted_rays_compute_code(curve.p1.x, curve.p2.x, curve.p3.x);
  code.y = fastuidraw_restricted_rays_compute_code(curve.p1.y, curve.p2.y, curve.p3.y);
  if (code.y != 0u)
    {
      float t1, t2, x1, x2;
      const float quad_tol = 0.0001;

      if (curve.is_quadratic && abs(A.y) > quad_tol)
        {
          float D, rA = 1.0 / A.y;

          D = B.y * B.y - A.y * C.y;
          if (D < 0.0)
            {
              code.y = 0u;
            }

          D = sqrt(max(D, 0.0));
          t1 = (B.y - D) * rA;
          t2 = (B.y + D) * rA;
        }
      else
        {
          t1 = t2 = 0.5 * C.y / B.y;
        }

      x1 = (A.x * t1 - B.x * 2.0) * t1 + C.x;
      x2 = (A.x * t2 - B.x * 2.0) * t2 + C.x;

      if ((code.y & 1u) != 0u)
        {
          if (x1 <= tr.reference_location && x1 >= 0.0)
            {
              R += 1;
            }

          if (t1 >= 0.0 && t1 <= 1.0)
            {
              fastuidraw_restricted_rays_update_distance(abs(x1), x1 < 0.0, dst);
            }
        }

      if (code.y > 1u)
        {
          if (x2 <= tr.reference_location && x2 >= 0.0)
            {
              R -= 1;
            }

          if (t2 >= 0.0 && t2 <= 1.0)
            {
              fastuidraw_restricted_rays_update_distance(abs(x2), x2 > 0.0, dst);
            }
        }
    }

  if (code.x != 0u)
    {
      float t1, t2, y1, y2;
      const float quad_tol = 0.0001;

      if (curve.is_quadratic && abs(A.x) > quad_tol)
        {
          float D, rA = 1.0 / A.x;

          D = B.x * B.x - A.x * C.x;
          if (D < 0.0)
            {
              code.x = 0u;
            }

          D = sqrt(max(D, 0.0));
          t1 = (B.x - D) * rA;
          t2 = (B.x + D) * rA;
        }
      else
        {
          t1 = t2 = 0.5 * C.x / B.x;
        }

      y1 = (A.y * t1 - B.y * 2.0) * t1 + C.y;
      y2 = (A.y * t2 - B.y * 2.0) * t2 + C.y;

      if ((code.x & 1u) != 0u && t1 >= 0.0 && t1 <= 1.0)
        {
          fastuidraw_restricted_rays_update_distance(abs(y1), y1 > 0.0, dst);
        }

      if (code.x > 1u && t2 >= 0.0 && t2 <= 1.0)
        {
          fastuidraw_restricted_rays_update_distance(abs(y2), y2 < 0.0, dst);
        }
    }

  /* When computing the L1-distance, we also need to minimum with the
   * endpoint of the curve. In local coordinates, the curve is given by:
   *
   *  p(t) = (A * t - 2B) * t + C
   *
   * so
   *
   *  p'(t) = 2At - 2B
   */
  vec2 dp1, dp3;

  dp1 = -B;
  dp3 = A - B;
  fastuidraw_restricted_rays_update_distance(curve.p1, dp1, dst);
  fastuidraw_restricted_rays_update_distance(curve.p3, dp3, dst);

  /* The last ingredient of minimizing the L1-distance is to minimize
   * against those t for which:
   *
   *   x'(t) - y'(t) = 0 or x'(t) + y'(t) = 0
   *
   * thus the t's are t0 and t1 where
   *
   * (A.x * t0 - B.x) + (A.y * t0 - B.y) = 0 --> t0 = (B.x + B.y) / (A.x + A.y)
   * (A.x * t1 - B.x) - (A.y * t1 - B.y) = 0 --> t1 = (B.x - B.y) / (A.x - A.y)
   *
   */
  if (curve.is_quadratic)
    {
      float d0, d1, n0, n1;
      const float tol = 0.0001;

      n0 = B.x + B.y;
      d0 = A.x + A.y;
      n0 *= sign(d0);
      d0 = abs(d0);

      n1 = B.x - B.y;
      d1 = A.x - A.y;
      n1 *= sign(d1);
      d1 = abs(d1);

      if (n0 > 0.0 && d0 > n0)
        {
          float t0;
          vec2 p, dp;

          t0 = n0 / d0;
          p = (A * t0 - 2.0 * B) * t0 + C;
          dp = A * t0 - B;
          fastuidraw_restricted_rays_update_distance(p, dp, dst);
        }

      if (n1 > 0.0 && d1 > n1)
        {
          float t1;
          vec2 p, dp;

          t1 = n1 / d1;
          p = (A * t1 - 2.0 * B) * t1 + C;
          dp = A * t1 - B;
          fastuidraw_restricted_rays_update_distance(p, dp, dst);
        }
    }

  return R;
}

void
fastuidraw_restricted_rays_load_curve(in uint raw,
                                      in uint glyph_data_location,
                                      out fastuidraw_restricted_rays_curve_type curve)
{
  uint curve_src;
  ivec2 ip1, ip2, ip3, iA, i2B, iC;

  curve_src = glyph_data_location + FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_curve_bit0,
                                                            fastuidraw_restricted_rays_curve_num_bits,
                                                            raw);
  curve.is_quadratic = (raw & fastuidraw_restricted_rays_curve_is_quadratic_mask) != 0u;

  ip1 = fastuidraw_restricted_rays_unpack_point(curve_src);
  ip2 = fastuidraw_restricted_rays_unpack_point(curve_src + 1u);

  if (curve.is_quadratic)
    {
      ip3 = fastuidraw_restricted_rays_unpack_point(curve_src + 2u);
      curve.p2 = vec2(ip2);
    }
  else
    {
      ip3 = ip2;
      curve.p2 = 0.5 * vec2(ip1 + ip3);
    }

  curve.p1 = vec2(ip1);
  curve.p3 = vec2(ip3);
}

int
fastuidraw_restricted_rays_load_and_process_curve(in uint raw,
                                                  in uint glyph_data_location,
                                                  in fastuidraw_restricted_rays_transformation tr,
                                                  inout fastuidraw_restricted_rays_distance_type nv)
{
  fastuidraw_restricted_rays_curve_type curve_data;
  int return_value;

  fastuidraw_restricted_rays_load_curve(raw,
                                        glyph_data_location,
                                        curve_data);


  return_value =
    fastuidraw_restricted_rays_compute_winding_contribution(curve_data, tr, nv);
  return return_value;
}

void
fastuidraw_restricted_rays_load_winding_reference(in uint location,
                                                  in fastuidraw_restricted_rays_box_type box,
                                                  out fastuidraw_restricted_rays_winding_sample_type s)
{
  uint texel, biased_winding;
  uvec2 uint_delta;
  vec2 position, delta;

  position = box.min_point;
  texel = FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(location);

  biased_winding = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_winding_value_bit0,
                                           fastuidraw_restricted_rays_winding_value_num_bits, texel);
  uint_delta.x = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_position_delta_x_bit0,
                                         fastuidraw_restricted_rays_position_delta_num_bits, texel);
  uint_delta.y = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_position_delta_y_bit0,
                                         fastuidraw_restricted_rays_position_delta_num_bits, texel);

  delta = vec2(uint_delta) * box.size;
  delta /= float(fastuidraw_restricted_rays_position_delta_divide);
  position += delta;

  s.reference_position = position;
  s.reference_winding = int(biased_winding) - int(fastuidraw_restricted_rays_winding_value_bias);
}

float
fastuidraw_restricted_rays_compute_coverage(in uint glyph_data_location,
                                            in vec2 glyph_coord,
                                            in vec2 glyph_coord_dx,
                                            in vec2 glyph_coord_dy,
                                            in vec2 bb_box_min,
                                            in vec2 bb_box_max,
                                            in bool use_odd_even_rule,
                                            out fastuidraw_restricted_rays_box_type texel_box,
                                            out fastuidraw_restricted_rays_winding_sample_type S,
                                            out int winding_number, out uint num_curves,
                                            out fastuidraw_restricted_rays_distance_type nv)
{
  uint src, c, curve_list, winding_sample_data_location;
  fastuidraw_restricted_rays_transformation tr;

  winding_sample_data_location =
    fastuidaw_restricted_rays_compute_box(glyph_coord,
                                          bb_box_min, bb_box_max,
                                          glyph_data_location,
                                          texel_box, curve_list, num_curves);
  fastuidraw_restricted_rays_init_distance(nv);
  fastuidraw_restricted_rays_load_winding_reference(winding_sample_data_location,
                                                    texel_box, S);

  fastuidraw_restricted_rays_compute_transformation(glyph_coord,
                                                    glyph_coord_dx, glyph_coord_dy,
                                                    S.reference_position, tr);
  winding_number = S.reference_winding;

  src = curve_list + glyph_data_location;
  for (c = 0u; c < num_curves; c += 2u)
    {
      uint cA, cB, curve_pair;

      curve_pair = FASTUIDRAW_RESTRICTED_RAYS_FETCH_DATA(src);
      ++src;

      cA = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_curve_entry0_bit0,
                                   fastuidraw_restricted_rays_curve_entry_num_bits,
                                   curve_pair);
      winding_number += fastuidraw_restricted_rays_load_and_process_curve(cA, glyph_data_location, tr, nv);

      if (c + 1u < num_curves)
        {
          cB = FASTUIDRAW_EXTRACT_BITS(fastuidraw_restricted_rays_curve_entry1_bit0,
                                       fastuidraw_restricted_rays_curve_entry_num_bits,
                                       curve_pair);
          winding_number += fastuidraw_restricted_rays_load_and_process_curve(cB, glyph_data_location, tr, nv);
        }
    }

  float cvg, distance;

  /* If using the odd-even fill rule of if the winding number at
   * the fragment is 0, use the minimum of those two; if the
   * winding value is 1 use the decrement value and if the winding
   * is -1 use the increment winding number; if the absolute value
   * of the winding value is greater than two, we will fallback
   * and simply view the fragment as fully covered.
   */
  if (winding_number == 0 || use_odd_even_rule)
    {
      distance = min(nv.distance_increment,
                     nv.distance_decrement);
    }
  else if (winding_number == -1)
    {
      distance = nv.distance_increment;
    }
  else if (winding_number == 1)
    {
      distance = nv.distance_decrement;
    }
  else
    {
      distance = 0.5;
    }

  distance = min(distance, 0.5);
  winding_number = (use_odd_even_rule && (winding_number & 1) == 0) ? 0 : winding_number;
  cvg = (winding_number != 0) ?
    (0.5 + distance) :
    (0.5 - distance);

  return cvg;
}

float
fastuidraw_restricted_rays_compute_coverage(in uint glyph_data_location,
                                            in vec2 glyph_coord,
                                            in vec2 glyph_coord_dx,
                                            in vec2 glyph_coord_dy,
                                            in vec2 bb_box_min,
                                            in vec2 bb_box_max,
                                            in bool use_odd_even_rule)
{
  fastuidraw_restricted_rays_box_type texel_box;
  fastuidraw_restricted_rays_winding_sample_type S;
  fastuidraw_restricted_rays_distance_type nv;
  int winding_number;
  uint num_curves;

  return fastuidraw_restricted_rays_compute_coverage(glyph_data_location,
                                                     glyph_coord,
                                                     glyph_coord_dx, glyph_coord_dy,
                                                     bb_box_min, bb_box_max,
                                                     use_odd_even_rule,
                                                     texel_box, S, winding_number,
                                                     num_curves, nv);
}
