float
FASTUIDRAW_COMPUTE_DASH_STROKE(in uint dashed_stroking_data_location,
                               in float total_distance,
                               in float first_interval_start,
                               in float in_distance,
                               in float distance_from_edge_start,
                               in float distance_to_end_of_edge,
                               in float stroke_width)
{
  float d, lastd, r, ff, s;
  uint loc;

#define HELPER_MACRO(b0, b1)                                            \
  FASTUIDRAW_COMPUTE_DASH_STROKE_HELPER(in_distance, distance_from_edge_start, distance_to_end_of_edge, b0 + ff, b1 + ff, stroke_width)

  r = 0.0;
  s = 1.0;
  ff = total_distance * floor(in_distance / total_distance);
  d = in_distance - ff;
  loc = dashed_stroking_data_location;
  lastd = first_interval_start;

  /* Data is packed quite trivially, where the values are just
     the successive total lengths, so we just keep reading
     until that value is greater than d. We also have that
     the first interval is how much to draw, so the sign determines
     the distance.
   */
  do
    {
      uvec3 V;
      vec3 fV;

      V = fastuidraw_fetch_data(loc).xyz;
      fV = uintBitsToFloat(V);

      if(d < fV.x)
        {
          r = s * HELPER_MACRO(lastd, fV.x);

          //break out
          return r;
          lastd = 2.0 * total_distance + 1.0;
        }
      else if(d < fV.y)
        {
          r = -s * HELPER_MACRO(fV.x, fV.y);

          //break out
          return r;
          lastd = 2.0 * total_distance + 1.0;
        }
      else if(d < fV.z)
        {
          r = s * HELPER_MACRO(fV.y, fV.z);

          //break out
          return r;
          lastd = 2.0 * total_distance + 1.0;
        }

      s = -s;
      lastd = fV.z;
      ++loc;
    }
  while(lastd < total_distance);

  return r;
}
