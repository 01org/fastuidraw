#ifdef GL_ES

uniform sampler2DArray fastuidraw_colorStopAtlas;
#define fastuidraw_colorStopFetch(x, L) textureLod(fastuidraw_colorStopAtlas, vec3(float(x), 0.0, float(L)), 0.0)

#else

uniform sampler1DArray fastuidraw_colorStopAtlas;
#define fastuidraw_colorStopFetch(x, L) textureLod(fastuidraw_colorStopAtlas, vec2(float(x), float(L)), 0.0)

#endif

uniform sampler2DArray fastuidraw_imageAtlas;
uniform sampler2DArray fastuidraw_imageAtlasFiltered;
uniform usampler2DArray fastuidraw_imageIndexAtlas;

uniform usampler2DArray fastuidraw_glyphTexelStoreUINT;

#ifndef FASTUIDRAW_PAINTER_EMULATE_GLYPH_TEXEL_STORE_FLOAT
uniform sampler2DArray fastuidraw_glyphTexelStoreFLOAT;
#endif

#ifdef FASTUIDRAW_GLYPH_DATA_STORE_TEXTURE_ARRAY
  /* The width and height of fastuidraw_glyphGeometryDataStore are
     powers of 2, the values given by FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2
     and FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2. We want to use
     bit shifts and masking to get the correct layer, height and so on.
  */
  uniform sampler2DArray fastuidraw_glyphGeometryDataStore;
  #define FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_PLUS_HEIGHT_LOG2 uint(FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2 + FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2)
  #define FASTUIDRAW_GLYPH_GEOMETRY_LAYER(T) (uint(T) >> FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_PLUS_HEIGHT_LOG2)
  #define FASTUIDRAW_GLYPH_GEOMETRY_Y(T) FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2, FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2, T)
  #define FASTUIDRAW_GLYPH_GEOMETRY_X(T) FASTUIDRAW_EXTRACT_BITS(0, FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2, T)
  #define FASTUIDRAW_GLYPH_GEOMETRY_COORD(v) ivec3(FASTUIDRAW_GLYPH_GEOMETRY_X(v), FASTUIDRAW_GLYPH_GEOMETRY_Y(v), FASTUIDRAW_GLYPH_GEOMETRY_LAYER(v))
  #define fastuidraw_fetch_glyph_data(block) texelFetch(fastuidraw_glyphGeometryDataStore, FASTUIDRAW_GLYPH_GEOMETRY_COORD(block), 0)
#else
  uniform samplerBuffer fastuidraw_glyphGeometryDataStore;
  #define fastuidraw_fetch_glyph_data(block) texelFetch(fastuidraw_glyphGeometryDataStore, int(block))
#endif

#ifndef FASTUIDRAW_PAINTER_USE_DATA_UBO
  uniform usamplerBuffer fastuidraw_painterStore_tbo;
  #define fastuidraw_fetch_data(block) texelFetch(fastuidraw_painterStore_tbo, int(block))
#else
/*
  Type in the array for the uniform blocks:
    FASTUIDRAW_PAINTER_DATA_STORE_UINT_TYPE is uint, uvec2, uvec3 or uvec4
  Size of the array is given by FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE
 */
  layout(std140) uniform fastuidraw_painterStore_ubo
  {
    FASTUIDRAW_PAINTER_DATA_STORE_UINT_TYPE fastuidraw_painterStore[FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE];
  };

  #define fastuidraw_fetch_data(block) uvec4(fastuidraw_painterStore[int(block)])

#endif

uniform vec2 fastuidraw_viewport_pixels;
uniform vec2 fastuidraw_viewport_recip_pixels;
uniform float fastuidraw_viewport_recip_pixels_magnitude;
