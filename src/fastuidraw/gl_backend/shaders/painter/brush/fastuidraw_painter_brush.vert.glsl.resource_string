void
fastuidraw_vert_brush_processing(in vec2 in_p, in fastuidraw_shader_header h)
{
  uint shader;
  uint data_ptr;
  fastuidraw_brush_image_data image;
  fastuidraw_brush_gradient gradient;
  fastuidraw_brush_repeat_window repeat_window;
  vec2 p;

  p = in_p;
  shader = h.brush_shader;
  data_ptr = h.brush_shader_data_location;

  data_ptr = fastuidraw_read_pen_color(data_ptr, fastuidraw_brush_pen_color);

  if(fastuidraw_brush_shader_has_image(shader))
    {
      data_ptr = fastuidraw_read_brush_image_data(data_ptr, shader, image);
    }
  else
    {
      image.master_index_tile_atlas_location_xyz = vec3(0.0, 0.0, 0.0);
      image.image_size = uvec2(1, 1);
      image.slack = uint(0);
      image.number_index_lookups = uint(0);
      image.image_size_over_master_size = uint(1);
    }

  if(fastuidraw_brush_shader_has_radial_gradient(shader))
    {
      data_ptr = fastuidraw_read_brush_radial_gradient_data(data_ptr, gradient);
    }
  else if(fastuidraw_brush_shader_has_linear_gradient(shader))
    {
      data_ptr = fastuidraw_read_brush_linear_gradient_data(data_ptr, gradient);
    }
  else
    {
      gradient.p0 = gradient.p1 = vec2(0.0, 0.0);
      gradient.r0 = gradient.r1 = 0.0;
      gradient.color_stop_sequence_length = 1.0;
      gradient.color_stop_sequence_xy = vec2(0.0, 0.0);
    }

  if(fastuidraw_brush_shader_has_repeat_window(shader))
    {
      data_ptr = fastuidraw_read_brush_repeat_window(data_ptr, repeat_window);
    }
  else
    {
      repeat_window.xy = vec2(0.0, 0.0);
      repeat_window.wh = vec2(1.0, 1.0);
    }

  if(fastuidraw_brush_shader_has_transformation_matrix(shader))
    {
      mat2 m;
      data_ptr = fastuidraw_read_brush_transformation_matrix(data_ptr, m);
      p = m * p;
    }

  if(fastuidraw_brush_shader_has_transformation_translation(shader))
    {
      vec2 q;
      data_ptr = fastuidraw_read_brush_transformation_translation(data_ptr, q);
      p += q;
    }


  float image_factor;

  fastuidraw_brush_p = p;

  fastuidraw_brush_repeat_window_xy = repeat_window.xy;
  fastuidraw_brush_repeat_window_wh = repeat_window.wh;

  fastuidraw_brush_gradient_p0 = gradient.p0;
  fastuidraw_brush_gradient_p1 = gradient.p1;
  fastuidraw_brush_gradient_r0 = gradient.r0;
  fastuidraw_brush_gradient_r1 = gradient.r1;

  image_factor = 1.0 / float(image.image_size_over_master_size);
  fastuidraw_brush_image_xy = image.master_index_tile_atlas_location_xyz.xy + vec2(image.image_start) * image_factor;
  fastuidraw_brush_image_layer = image.master_index_tile_atlas_location_xyz.z;
  fastuidraw_brush_image_factor = image_factor;
  fastuidraw_brush_image_size = vec2(image.image_size);

  float color_stop_recip;

  color_stop_recip = fastuidraw_colorStopAtlas_size_reciprocal;
  fastuidraw_brush_color_stop_length = color_stop_recip * gradient.color_stop_sequence_length;
  fastuidraw_brush_color_stop_xy.x = color_stop_recip * gradient.color_stop_sequence_xy.x;
  fastuidraw_brush_color_stop_xy.y = gradient.color_stop_sequence_xy.y;
  fastuidraw_brush_shader = shader;
}
