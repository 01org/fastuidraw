Issues:


   File and type names
   --------------------
    The naming scheme of files vs objects is bad. Files are all named
    underscore_style, where as classes are named PascalCaseStyle.
    Should make this consistent. Worse, some situations, the name
    ordering is backwards for example freetype_font.[ch]pp defines the
    class FontFreeType. Also, a number of base classes are defined in
    files without the _base suffix, for example FontBase is define in
    font.hpp.

  GlyphSelector
  --------------------
     GlyphSelector is of questionable value in FastUIDraw since
     glyph selection is closely tied with layout and FastUIDraw
     is supposed to do JUST drawing. However, taken to an extreme
     also means that all of the layout data in GlpyhLayout except
     for m_units_per_EM is not needed either.

  GL ickiness
  --------------------
   A number of dtor's in the gl_backend need a GL context
   to operate. However, these objects are reference counted
   and thus their dtors can happen outside of the GL context
   that created them being current. The way out is to have a
   concept of "GL context worker" where functors are added to
   the worker and the worker runs these functors "whenever it
   gets a chance" to do so within a GL context.

  Painter
  -------
   It might be a good idea to have special cases (that a backend must
   support) for clipIn, clipOut against rounded rects and also drawing
   rounded rects. The easiest way is additional shaders to draw a
   rounded rect and another to draw its complement.

  Clipping and Webkit/Blink
  ------------------------------
    Curently, WebCore::GraphicsContext in WebKit/Blink has the following clipping methods:

    void clip(const IntRect&);
    void clip(const FloatRect&);
    void clipRoundedRect(const FloatRoundedRect&);

    void clipOut(const FloatRect&);
    void clipOutRoundedRect(const FloatRoundedRect&);
    void clipPath(const Path&, WindRule);
    void clipConvexPolygon(size_t numPoints, const FloatPoint*, bool antialias = true);
    void clipToImageBuffer(ImageBuffer&, const FloatRect&);

    void clip(const Path&, WindRule = RULE_EVENODD);
    void clipOut(const Path&);

    All of the above except clipToImageBuffer() are doable with clipIn
    and clipOut of Painter. However, optimization is possible for
    clipRoundedRect (shader to draw complement of rounded rect),
    and clipConvexPolygon (rather than a path, just a seqence of points)

    It -might- be a good idea to add a customizable entry point to
    Painter for "custom clip out", clipToImageBuffer would be clipOut
    with custom shader reading from brush value that if alpha was
    non-zero, then to discard.

  Clipping and Paths
  -----
   SKIA's clipping methods are that given a region and an operation
   to then set the clipping. The operations that SKIA supports are:
    - Intersect
    - Union
    - Difference
    - XOR
    - Reverse Difference
    - Replace

   Painter directly supports:
    Intersect  --> clipIn
    Difference --> clipOut

   We can support clipping directly to a specified path by
   just popping the entire occluder stack (and resetting the
   clip-equations to not clip). However, that plays havoc with
   save()/restore(). The only way to support arbitary set is
   to save the occluder stack (and other state potentially)
   to allow for setClip. This is possible, but really, really
   messy and potentially inefficient.

   In addition, having the other region combine modes is
   not fun. Supporting the other modes can be done with
   the following. A SimplePath is a path so that the winding
   number for any point is 1 or 0.

    1. const SimplePath& Path::pathOutline(fill_rule f)
        This method returns a SimplePath P so that the path P
        with the winding rule windind_number == 1
        gives the exact same fill of the original path
        with the fill rule f. The implementation of this
        is esentially get the contours of the original
        Path of the fill rule and use them to define the
        return value.

    2. SimplePath::SimplePath(const_c_array<SimplePath> paths, union)
        Constructs a path as the union of a set of paths.
        The implementation is essentially:
        Path temp;
        for(each P of paths)
          {
            temp.addContours(P);
          }
        *this = temp.pathOutline(winding_number >= 1)

    2. SimplePath::SimplePath(const_c_array<SimplePath> paths, intersect)
        Constructs a path as the intersection of a set of paths.
        The implementation is essentially:
        Path temp;
        for(each P of paths)
          {
            temp.addContours(P);
          }
        *this = temp.pathOutline(winding_number == paths.size())

    3. SimplePath::SimplePath(const SimplePath &p1, const SimplePath &p2, xor)
       {
          Path temp;
          temp.addCountours(p1);
          temp.addCountours(p2);
          *this = temp.pathOutline(odd_even_fill_rule);
       }

   4. SimplePath::SimplePath(const SimplePath &p1, const SimplePath &p2, Difference)
      {
        Path temp;
        temp.addCountours(p1);
        temp.addCountorus(p2.reversed());
        *this = temp.pathOutline( winding_rule >= 1);
      }
