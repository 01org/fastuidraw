NEW IDEA: for text rendering
       We store all the curves in Bezier form. A texel value is an
       offset into the data buffer. The data packed is:
         - Winding number at texel center
         - N = # of curves
         - offset to curve 1
         - offset to curve 2
         - .
         - .
         - offset to curve N.
      Coverage computation is the following:
        1. Let p = texel coordinate in glyph.
        2. Let c = middle of the texel of p
        3. Let L = [c,p] i.e. the line segment from p to c
        4. for each curve A in the texel, compute the intersection
           of L and A. Increment/decrement as required by nature
           of intersection. That sum when added to the winding
           number at c gives the winding number at p. In addition
           we can also give a pseudo distance as the distance along
           the ray from c to p to the nearest intersecting curve from -c-.
           If there are no intersection, we can give the distance as
           some "max value". For c near the texel boundary, it can be
           totally wrong because a curve might be outside of the texel
           but be close to c. [we could make it work better by saying a
           texel gets all the curves that go through it or any neighboring
           texels].

NEW IDEA: Better Color Stops. Instead of using linear sampling we can store
          the actual color stops in values. We enforce that the color stops
          count is always a power of 2. Then the binary search as to where
          is a simple iterative loop from the recursive function
            int find(int start, int last, float t, const float *stops)
            {
               if (last == start + 1)
                  return start;
               int Q = (start + last) / 2;
               if (t <= stops[Q])
                 return find(start, Q, t, stops);
               else
                 return find(Q+1, last, t, stops);
            }
          if we have that stops is power of 2 in size, we can make the
          above recursive function into iterative.
            int find(float t, const float *stops, int log2N)
            {
              int Q, start(0), end(1<<log2N), last(end - 1);
              for(int i = 0; i < log2N; ++i)
              {
                if(last == start + 1)
                   return start;
                Q = (start + last) / 2;
                if(t <= stops[Q])
                {
                  last = Q;
                }
                else
                {
                  start = Q + 1;
                }
              }
              return start;
            }
          This would allow for mean gradients which have very small distances
          between their color stop locations (even 0).
