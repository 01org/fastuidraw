/*!
  \file main.doxy
  \brief main.doxy
 */

/*!
\defgroup Utility Utility
@{
\brief
Utility provides simple utility classes, the most important and
commonly used ones being \ref reference_counted_ptr, \ref vecN,
and \ref c_array. Part of the main library libFastUIDraw.
@}

\defgroup Text Text
@{
\brief
Text provides the interfaces to realizing glyph data for rendering
glyphs. The big classes being \ref Glyph, \ref GlyphCache, \ref
GlyphAtlas and \ref FontBase. Part of the main library libFastUIDraw.
@}

\defgroup Paths Paths
@{
\brief
Path provides the interface to realize paths, the main entry point
for applications is the object \ref Path.
@}

\defgroup Imaging Imaging
@{
\brief
Imaging provides the interface to realize images
and color gradients.
@}

\defgroup GLSL GLSL
@{
\brief
Utility module to assist in creating GLSL shaders and also provides
glsl::PainterBackendGLSL which provides shader assembly and default
shaders via GLSL shaders. Part of the main library libFastUIDraw.
@}

\defgroup Painter Painter
@{
\brief
Painter provides the interface for Canvas drawing, the most important class
being Painter. Part of the main library libFastUIDraw.
@}

\defgroup PainterAttribute Painter Attribute
@{
\brief
Painter Attribute provides the interface to define the attribute data
to be used by shaders. This includes how glyphs, stroked paths and filled
paths are realized as attribute data.
@}

\defgroup PainterShaders Painter Shaders
@{
\brief
Painter Shaders defines the interface how to specify shaders used by
\ref Painter to render items.
@}

\defgroup PainterBackend Painter Backend
@{
\brief
If one is making a painter backend, then this group provides the
information, see particularly the enumerations in fastuidraw::PainterHeader,
fastuidraw::PainterItemMatrix, fastuidraw::PainterClipEquations
for how data is packed by fastuidraw::Painter. Part of the main library
libFastUIDraw.

\section Overview
The class fastuidraw::Painter implements canvas rendering using an implementation
of the backend interface fastuidraw::PainterBackend to send data to a 3D API.
The class fastuidraw::Painter packs data that is used by multiple triangles
into fastuidraw::PainterDrawCommand::m_store (for example the current transformation).
In implementing a backend, the shader fed to the GPU needs to correctly unpack
this data. The location of the header of the data is stored in the attribute
from the value fastuidraw::PainterDrawCommand::m_header_attributes. The header
consists of fastuidraw::PainterHeader::header_size uint32_t whose location
relative to the start of the header and meaning are enumerated by
fastuidraw::PainterHeader::offset_t. The header contains shader ID's
and additional offsets to more data packed for a shader to unpack.



@}

\defgroup GLBackend GL Backend
@{
\brief
Implementation of a backend using the OpenGL (or OpenGL ES) GPU API.
@}

\defgroup GLUtility GL Utility
@{
\brief
Collection of utility interfaces used by \ref GLBackend that an application
may wish to use as well.
@}
*/

/*!
  \brief all classes and functions of FastUIDraw are in the
         namespace fastuidraw.
 */
namespace fastuidraw {

/*!\addtogroup GLSL
  @{
 */
  /*!
    \brief Namesapce to encapsulate shader building to GLSL
           shaders, part of the main library libFastUIDraw.
   */
  namespace glsl
  {
  }
/*! @} */

  /*!
    \brief Namespace to encapsulate GL backend end implementation,
    utility functions and utility classes. Part of the GL
    backend libraries, libFastUIDrawGL and libFastUIDrawGLES.
  */
  namespace gl
  {

/*!\addtogroup GLUtility
  @{
 */
    /*!
      \brief Template version for setting an of uniform values
      \param location location of uniform, i.e. return value
             of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    Uniform(int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
                      \param v value
    */
    template<typename T, size_t N>
    void
    Uniform(int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*!
      \brief Template version for setting an of uniform values
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
    */
    template<typename T, size_t N>
    void
    ProgramUniform(GLuint program, int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*! @} */
  }
}

/*! \mainpage FastUIDraw

  \section Purpose

  FastUIDraw provides a high performance, programmable implementation
  of canvas, found in the class fastuidraw::Painter. FastUIDraw's implementation
  of canvas reduces the CPU load dramatically and uses a very small
  number of graphics pipeline states (for example the GL backend
  using only the features of GL core v3.3, has only 3 pipeline states
  to implement all of the traditional canvas interface and all 12
  Porter-Duff blending modes). An API trace of the GL backend of
  FastUIDraw in action will show that there are only a handful
  of draw calls per frame (even if there are many different kinds
  of elements drawn) with very few, if any, pipeline state changes.

  \section Features

  The features of fastuidraw::Painter (with the GL backend) are:
   - Standard Brush (embodied by fastuidraw::PainterBrush)
     -# linear gradient
     -# radial gradient
     -# sweep gradient
     -# repeat window
     -# linear brush tranformation
     -# image (and repeat image)
     -# "starting" constant pen color
   - Custom Brushes
   - Drawing primitives
     -# path stroking
        -# Ability to change stroking width without recomputation of any data
        -# Joins
           - Miter Joins
           - Bevel Joins
           - Rounded Joins
        -# Caps
           - Square Caps
           - Rounded Caps
           - Flat Caps
     -# Path filling (against arbitary fill rules)
     -# GPU rendered glyphs
     -# Quads
     -# Ability for application to have custom drawing types via shaders
   - Clipping
     -# ClipIn against filled paths
     -# ClipOut against filled paths
   - Blend Modes
     -# All Porter-Duff blend modes
     -# Ability for application to have custom blending types via shaders

  \section Details Details
  For further details see \ref DetailsPage

  \section Examples
  - See \ref ex_framework for the example framework to get started with the examples
  - See \ref ex_initialization for the how to create a \ref fastuidraw::Painter
  - See \ref ex_text for an example of using \ref fastuidraw::GlyphSequence to draw text with \ref fastuidraw::Painter
  - See \ref ex_brush for an example of using \ref fastuidraw::PainterBrush to render gradients
*/
