/*!
  \file main.doxy
  \brief main.doxy
 */

/*!
\defgroup Utility Utility
@{
\brief
Utility provides simple utility classes, the most important and
commonly used ones being \ref reference_counted_ptr, \ref vecN,
and \ref c_array. Part of the main library libFastUIDraw.
@}

\defgroup Text Text
@{
\brief
Text provides the interfaces to realizing glyph data for rendering
glyphs. The big classes being \ref Glyph, \ref GlyphCache, \ref
GlyphAtlas and \ref FontBase. Part of the main library libFastUIDraw.
@}

\defgroup Paths Paths
@{
\brief
Path provides the interface to realize paths, the main entry point
for applications is the object \ref Path.
@}

\defgroup Imaging Imaging
@{
\brief
Imaging provides the interface to realize images
and color gradients.
@}

\defgroup GLSL GLSL
@{
\brief
Utility module to assist in creating GLSL shaders and also provides
glsl::PainterBackendGLSL which provides shader assembly and default
shaders via GLSL shaders. Part of the main library libFastUIDraw.
@}

\defgroup Painter Painter
@{
\brief
Painter provides the interface for Canvas drawing, the most important class
being Painter. Part of the main library libFastUIDraw.
@}

\defgroup PainterBackend Painter Backend
@{
\brief
If one is making a painter backend, then this group provides the
information, see particularly the enumerations in fastuidraw::PainterHeader,
fastuidraw::PainterItemMatrix, fastuidraw::PainterClipEquations
for how data is packed by fastuidraw::Painter. Part of the main library
libFastUIDraw.

\section Overview
The class fastuidraw::Painter implements canvas rendering using an implementation
of the backend interface fastuidraw::PainterBackend to send data to a 3D API.
The class fastuidraw::Painter packs data that is used by multiple triangles
into fastuidraw::PainterDrawCommand::m_store (for example the current transformation).
In implementing a backend, the shader fed to the GPU needs to correctly unpack
this data. The location of the header of the data is stored in the attribute
from the value fastuidraw::PainterDrawCommand::m_header_attributes. The header
consists of fastuidraw::PainterHeader::header_size uint32_t whose location
relative to the start of the header and meaning are enumerated by
fastuidraw::PainterHeader::offset_t. The header contains shader ID's
and additional offsets to more data packed for a shader to unpack.



@}

\defgroup GLBackend GL Backend
@{
\brief
Implementation of a backend using the OpenGL (or OpenGL ES) GPU API.
@}

\defgroup GLUtility GL Utility
@{
\brief
Collection of utility interfaces used by \ref GLBackend that an application
may wish to use as well.
@}
*/

/*!
  \brief all classes and functions of FastUIDraw are in the
         namespace fastuidraw.
 */
namespace fastuidraw {

/*!\addtogroup GLSL
  @{
 */
  /*!
    \brief Namesapce to encapsulate shader building to GLSL
           shaders, part of the main library libFastUIDraw.
   */
  namespace glsl
  {
  }
/*! @} */

  /*!
    \brief Namespace to encapsulate GL backend end implementation,
    utility functions and utility classes. Part of the GL
    backend libraries, libFastUIDrawGL and libFastUIDrawGLES.
  */
  namespace gl
  {

/*!\addtogroup GLUtility
  @{
 */
    /*!
      \brief Template version for setting an of uniform values
      \param location location of uniform, i.e. return value
             of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    Uniform(int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
                      \param v value
    */
    template<typename T, size_t N>
    void
    Uniform(int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    Uniform(int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*!
      \brief Template version for setting an of uniform values
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v array of values
      \param count number of elements from the array v to use.
    */
    template<typename T>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const T *v);

    /*!
      \brief Template version for setting an array of matrix uniform values.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param count number of elements from the array v to use.
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, GLsizei count, const matrixNxM<T, N, M> *v, bool transposed = false);

    /*!
      \brief Template version for setting a single uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
    */
    template<typename T, size_t N>
    void
    ProgramUniform(GLuint program, int location, const vecN<T, N> &v);

    /*!
      \brief Template version for setting a single matrix uniform value.
      \param program GL name of program to which uniform(s) belong
      \param location location of uniform, i.e. return value
                      of glGetUniformLocation
      \param v value
      \param transposed set to tue true if GL should interpret the matrices as transposed
    */
    template<typename T, size_t N, size_t M>
    void
    ProgramUniform(GLuint program, int location, const matrixNxM<T, N, M> &v, bool transposed = false);

    /*! @} */
  }
}

/*! \mainpage FastUIDraw

  \section Purpose

  FastUIDraw provides a high performance, programmable implementation
  of canvas, found in the class fastuidraw::Painter. FastUIDraw's implementation
  of canvas reduces the CPU load dramatically and uses a very small
  number of graphics pipeline states (for example the GL backend
  using only the features of GL core v3.3, has only 3 pipeline states
  to implement all of the traditional canvas interface and all 12
  Porter-Duff blending modes). An API trace of the GL backend of
  FastUIDraw in action will show that there are only a handful
  of draw calls per frame (even if there are many different kinds
  of elements drawn) with very few, if any, pipeline state changes.

  \section Features

  The features of fastuidraw::Painter (with the GL backend) are:
   - Brush (embodied by fastuidraw::PainterBrush)
     -# linear gradient
     -# radial gradient
     -# repeat window
     -# linear brush tranformation
     -# image (and repeat image)
     -# "starting" constant pen color
   - Drawing primitives
     -# path stroking
        -# Ability to change stroking width without recomputation of any data
        -# Joins
           - Miter Joins
           - Bevel Joins
           - Rounded Joins
        -# Caps
           - Square Caps
           - Rounded Caps
           - Flat Caps
     -# Path filling (against arbitary fill rules)
     -# GPU rendered glyphs
     -# Quads
     -# Ability for application to have custom drawing types via shaders
   - Clipping
     -# ClipIn against filled paths
     -# ClipOut against filled paths
   - Blend Modes
     -# All Porter-Duff blend modes
     -# Ability for application to have custom blending types via shaders

  \section Concepts
  FastUIDraw strongly distinguishes between "what" to draw and "how" to draw.
  The "what" to draw is embodied by attribute and index data. This data is
  expected to be reused and, for the fastuidraw::Painter interface, is embodied
  by the fastuidraw::PainterAttributeData. The "how" to draw is small amounts
  of data that includes transformation state, brush state and so on. For the class
  fastuidraw::Painter, the "how" to draw is embodied by fastuidraw::PainterData.
  The expectation is "how" to draw can be changed without incurring significant
  CPU load.

  \section Resources
  All of the "resources" used by a canvas are to reside on a set
  of atlases:
   - Images reside on a fastuidraw::ImageAtlas (see also fastuidraw::Image)
   - Glyphs reside on a fastuidraw::GlyphAtlas (see also fastuidraw::Glyph)
   - Color stops reside on a fastuidraw::ColorStopAtlas (see also fastuidraw::ColorStopSequenceOnAtlas)
  An instance of fastuidraw::Painter has that it sources all its resources from a fixed
  set of atlases.

  \section Text
  The elements in the group \ref Text are for the realization of glyphs. FastUIDraw
  does <i>NOT</i> provide functions for layout of glyphs. The API exposed through
  fastuidraw::GlyphSequence is that an application provides a sequence of glyphs,
  glyph positions and the the size at which the text has been layed out. Glyph objects
  reside on a fastuidraw::GlyphCache which provides an interface to fetch glyphs from
  a glyph code and a fastuidraw::GlyphRender. A fastuidraw::GlyphRender
  specifies the type of resource data on how to render glyphs. The class
  fastuidraw::GlyphSelector provides assistance for selection of glyphs from
  character codes, but an application can use any system it likes for glyph selection.
  FastUIDraw has the class fastuidraw::FontFreeType to construct a font via Freetype
  (either from a file or FT_Face). Below is an example of startup code and simple layout code.
  \code
  //startup
    // choose an orientation convention
    //  # y_increases_downwards --> y = 0 is at top of the window and increases down the window
    //  # y_increases_upwards   --> y = 0 is at bottom of the window and increases up the window
    enum fastuidraw::PainterEnums::screen_orientation myOrientation(PainterEnums::y_increases_downwards);

    //use GL backend atlas
    fastuidraw::reference_counted_ptr<fastuidraw::GlyphAtlas> myGlyphAtlas;
    myGlyphAtlas = FASTUIDRAWnew fastuidraw::gl::GlyphAtlasGL(fastuidraw::gl::GlyphAtlasGL::params());

    //setup glyph cache and glyph selector; the glyph selector
    //is a VERY simple class to enable finding glyphs from fonts
    //and falling back to other fonts when a glyph cannot be found
    fastuidraw::reference_counted_ptr<fastuidraw::GlyphCache> myGlyphCache;
    fastuidraw::reference_counted_ptr<fastuidraw::GlyphSelector> myGlyphSelector;
    myGlyphCache = FASTUIDRAWnew fastuidraw::GlyphCache(myGlyphAtlas);
    myGlyphSelector = FASTUIDRAWnew fastuidraw::GlyphSelector();

    //create a generator object that the font uses to load the font data,
    //in this example we load the font contents from a file directly.
    fastuidraw::reference_counted_ptr<fastuidraw::FreeTypeFace::GeneratorBase> gen;
    gen = FASTUIDRAWnew fastuidraw::FreeTypeFace::GeneratorFile("myFont.ttf", 0);

    //create the font
    myFont = FASTUIDRAWnew fastuidraw::FontFreeType(gen);

    //add font to GlyphSelector
    myGlyphSelector->add_font(font);

  //creating glyph sequence.
    const char *text = "Hello World";
    float layout_pixel_size(32.0f); //a pixel size by which to layout text
    std::vector<fastuidraw::Glyph> glyphs;
    std::vector<fastuidraw::vec2> glyph_positions;
    fastuidraw::vec2 pen_position(0.0f, 0.0f);
    for(const char *p = text; *p; ++p)
      {
        fastuidraw::GlyphSource g;
        g = myGlyphSelector->fetch_glyph(myFont, *p);
        if(g.m_font)
          {
            glyphs.push_back(g);
            glyph_positions.push_back(pen_positions);

            fastuidraw::GlyphMetrics m;
            float ratio;

            m = myGlyphCache->fetch_glyph_metrics(g.m_font, g.m_glyph_code);
            ratio = layout_pixel_size / m.m_units_per_EM;
            pen_positions.x() += ratio * m.m_advance.x();
          }
      }
    fastuidraw::GlyphSequence myHelloWorld(layout_pixel_size,
                                           myOrientation,
                                           myGlyphCache);

  \endcode
  Notes:
   - One does not need to use fastuidraw::GlyphSelector at all, one can
     choose glyph codes directly
   - The above layout is very limited, but because an application can
     construct fonts from FT_Face objects, one can use text shaping
     and layout libraries of one's choice to perform layout.

  \section CustomDrawing Custom Drawing
  In addition to drawing glyph sequences, rectangles, filling and stroking paths,
  FastUIDraw provides an interface to applications to create attribute and data as it sees fit.
  For drawing of an item there are three kinds of data used to draw an item.
  -# Attribute data which is value per vertex emitted. Attribute data is realized by
     fastuidraw::PainterAttribute values.
  -# Index data is indices into an array of fastuidraw::PainterAttribute to specify what
     triangles to draw. Indices are realized as fastuidraw::PainterIndex values.
  -# Reused data is data that is common to all vertices and pixels of an item or even
     multiple items. This data is realized by fastuidraw::generic_data. This data
     is realized as part of fastuidraw::PainterData::m_item_shader_data.

  To draw custom data, use the function fastuidraw::Painter::draw_generic().
  The object fastuidraw::PainterItemShader encapsulates how to process vertices and
  fragments for the draw. A custom shader is tied to the backend.
  However, these classes are only the interface for fastuidraw::Painter.
  The actual shading code is tied to the GPU API one is using. For GL (and GLES)
  backend, the shader class is the class fastuidraw::glsl::PainterItemShaderGLSL.
  In that class, one writes GLSL code. WARNING: if one write incorrect GLSL code,
  the uber-shader will fail to compile and all painting is then disabled!

  All pixels are passed through the brush of fastuidraw::Painter,
  embodied by fastuidraw::PainterBrush. That brush class contains the abiltiy
  to apply gradients (linear, radial), repeat windowing, transformation of
  brush image, pen color and image (complete with repeating and filtering the
  image).

  \section Example
  Below is an example of how to use fastuidraw::Painter
  \code

  ///////////////////////////////////////////////////////
  // startup code, create data that is repeatedly used //
  ///////////////////////////////////////////////////////

  // choose an orientation convention
  //  # y_increases_downwards --> y = 0 is at top of the window and increases down the window
  //  # y_increases_upwards   --> y = 0 is at bottom of the window and increases up the window
  enum fastuidraw::PainterEnums::screen_orientation myOrientation(PainterEnums::y_increases_downwards);

  // create a path to render, it is always better to save
  // your path objects to be reused each frame. A Path
  // caches its tessellations, how to stroke and fill
  // components. Recreating a path means all tha data
  // must be regenerated.
  fastuidraw::Path myPath;
  myPath
  .move(fastuidraw::vec2(0.0f, 0.0f))
  .line_to(fastuidraw::vec2(100.0f, 0.0f))
  .quadratic_to(fastuidraw::vec2(100, 50.0f), fastuidraw::vec2(100.0f, 100.0f))
  .close_contour_arc(45.0 * M_PI / 180.0f);


  // formatting text should also know the size of
  // of the text. When formatting text, the class
  // GlyphMetrics informs how to scale the glyph
  // for any size/
  int myTextFormattingSize;

  // generate glyphs and glyph_positions, a GlyphSource
  // specifies both a font and glyph code to use;
  // one can load fonts directly via FontFreeType
  // or can use GlyphSelector to select glyphs from
  // fonts added to it
  fastuidraw::vec2 *glyph_positions;
  fastuidraw::GlyphSource *glyphs;
  unsigned int number_glyphs;

  // a GlyphSequence holds the formatted text and lazily generates
  // data to feed Painter for drawing text, save and reuse this object
  // to draw your text.
  fastuidraw::GlyphSequence myGlyphSequence(myTextFormattingSize,
                                            fastuidraw::PainterEnums::y_increases_downwards,
                                            myGlyphCache);

  // copy the glyph choices and positions into your GlyphSequence object that you keep.
  myGlyphSequence.add_glyphs(fastuidraw::c_array<const fastuidraw::GlyphSource>(glyphs, number_glyphs),
                             fastuidraw::c_array<const fastuidraw::vec2>(glyph_positions, number_glyphs));

  // create and save an image
  fastuidraw::reference_counted_ptr<fastuidraw::Image> myImage;
  myImage = fastuidraw::Image::create(myImageAtlas, width, height, pixels,
                                     fastuidraw::PainterBrush::slack_requirement(fastuidraw::PainterBrush::image_filter_cubic));

  //////////////////////////////////////
  // rendering code called many times //
  //////////////////////////////////////

  // painter is of type reference_counted_ptr<Painter>
  fastuidraw::Painter *p;
  p = painter.get(); //Only using pointer instead of handle so that doxygen links to functions correctly.

  p->begin(surface, myOrientation); //pass the surface one made at application initialization

  fastuidraw::PainterBrush brush;

  brush.color(0.0f, 0.0f, 1.0f, 0.5f);
  p->fill_path(fastuidraw::PainterData(&brush),
               myPath, fastuidraw::PainterEnums::odd_even_fill_rule);

  p->save();
  p->clip_in_path(myPath, fastuidraw::PainterEnums::odd_even_fill_rule);
  p->translate(fastuidraw::vec2(50.0f, 50.0f));
  p->rotate(23.0f * M_PI / 180.0f);
  brush.color(1.0f, 1.0f, 0.0f, 1.0f);
  p->draw_glyphs(fastuidraw::PainterData(&brush), myStaticText);
  p->restore();

  // brush controls the brush applied to the stroking
  brush.color(1.0f, 1.0f, 1.0f, 1.0f);
  brush.image(myImage, fastuidraw::PainterBrush::image_filter_cubic);

  // stroke_params controls the stroking width and miter-limit
  fastuidraw::PainterStrokeParams stroke_params;
  stroke_params.miter_limit(2.0f);
  stroke_params.width(10.0f);

  // stroking style controls cap-style, join-style, if to draw
  // the closing edge of the contours and how to anti-alias
  fastuidraw::StrokingStyle stroking_style;
  stroking_style.cap_style(fastuidraw::PainterEnums::flat_caps);
  stroking_style.join_style(fastuidraw::PainterEnums::rounded_joins);

  p->stroke_path(fastuidraw::PainterData(&brush, &stroke_params),
                 myPath, stroking_style);

  brush.color(0.4, 0.4, 1.0, 1.0);
  p->draw_glyphs(fastuidraw::PainterData(&brush), myGlyphSequence);

  p->end(); //on end() contents of surface can be used

  \endcode

  \subsection Backends
  FastUIDraw is designed to support GPU API's beyond OpenGL and OpenGL ES.
  To that end, FastUIDraw has a core (represented by libFastUIDraw) and an
  interface to create a backend. A backend implementation encompasses
  creating backend classes for the following base interface classes
   - fastuidraw::ImageAtlas (the GL backend class is given by fastuidraw::gl::ImageAtlasGL)
   - fastuidraw::ColorStopAtlas (the GL backend class is given by fastuidraw::gl::ColorStopAtlasGL)
   - fastuidraw::GlyphAtlas (the GL backend class is given by fastuidraw::gl::GlyphAtlasGL)
   - fastuidraw::PainterBackend (the GL backend class is given by fastuidraw::gl::PainterBackendGL)
   - fastuidraw::PainterBlendShader (the GL backend class is given by fastuidraw::glsl::PainterBlendShaderGLSL)
   - fastuidraw::PainterItemShader (the GL backend class is given by fastuidraw::glsl::PainterItemShaderGLSL)
   - fastuidraw::PainterBackend::Surface (the GL backend class is given by fastuidraw::gl::PainterBackendGL::SurfaceGL)

  To create a GL backend, one does:
  \code

  

  //create a fastuidraw::gl::PainterBackendGL::SurfaceGL; the argument
  //to its ctor determines its properties. Of important note is that
  //a SurfaceGL can use as its backing store a GL texture passed FROM
  //the caller.
  fastuidraw::reference_counted_ptr<fastuidraw::PainterBackend::SurfaceGL> surface;

  fastuidraw::gl::PainterBackendGL::SurfaceGL::Properties props;
  props.dimensions(ivec2(resolution_width, resolution_height));
  surface = FASTUIDRAWnew fastuidraw::gl::PainterBackendGL::SurfaceGL(props);

  //Create a GL backend for Painter, see the methods of PainterBackendGL on
  //how to control how the backend is configured.
  fastuidraw::reference_counted_ptr<fastuidraw::PainterBackend> painterBackend;
  painterBackend = fastuidraw::gl::PainterBackendGL::create();

  //NOTES:
  // 1. atlases can be used by multiple PainterBackendGL simutaneously
  // 2. the member class params of each of the atlas types and PainterBackendGL
  //    have additional properties one can set.
  // 3. A PainterBackendGL is a very -heavy- object. Hence, these objects
  //    should reused during an applications lifetime.
  // 4. If a program needs multiple PainterBackendGL objects, use the
  //    method fastuidraw::gl::PainterBackendGL::create_shared()
  //    to create a PainterBackendGL that shares the \ref fastuidraw::gl::Program
  //    object with the creator but has its own private buffer pools and state.

  fastuidraw::reference_counted_ptr<fastuidraw::Painter> painter;
  painter = FASTUIDRAWnew fastuidraw::Painter(painterBackend)

  //NOTES:
  // 3. it is fine to reuse a fastuidraw::Painter object or to create new ones,
  //    however, a single painter can not be used concurrently from multiple threads
  \endcode

  Using the GL backend is just:
  \code
  //have the painter render to the surface
  painter->begin(surface, myOrientation);
    //painter calls
    //.
    //.
  painter->end(); //finish painting, contents of surface ready

  //one /needs to get the contents of the SurfaceGL, there
  //are two ways: via blit_surface() or by using the texture
  //of the SurfaceGL
  fastuidraw::gl::PainterBackendGL::SurfaceGL *surface_gl;
  surface_gl = surface.get(); //Only using pointer instead of handle so that doxygen links to functions correctly.

  //blitting is done by
  surface_gl->blit_surface();

  //or one can get the texture of the SurfaceGL
  //directly and use that in one's own GL commands
  GLuint gl_texture;
  gl_texture = surface_gl->texture();
  \endcode
*/
