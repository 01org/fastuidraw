/*!
 * \file checked_delete.hpp
 * \brief file checked_delete.hpp
 *
 * Adapted from core/checked_delete.hpp of BOOST:
 *
 * Copyright (c) 2002, 2003 Peter Dimov
 * Copyright (c) 2003 Daniel Frey
 * Copyright (c) 2003 Howard Hinnant
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#pragma once

#include <stdint.h>

namespace fastuidraw
{
/*!\addtogroup Utility
  @{
 */

  /*!
    A wrapper over delete. If the type T is not complete,
    checked_delete() will trigger a compiler error.
   */
  template<typename T>
  inline
  void
  checked_delete(T *p)
  {
    typedef uint8_t type[sizeof(T) ? 1 : -1];
    unsigned int N;
    N = sizeof(type);
    (void)N;
    delete p;
  }

  /*!
    A wrapper over delete[]. If the type T is not complete,
    checked_array_delete() will trigger a compiler error.
   */
  template<typename T>
  inline
  void
  checked_array_delete(T *p)
  {
    typedef uint8_t type[sizeof(T) ? 1 : -1];
    unsigned int N;
    N = sizeof(type);
    (void)N;
    delete[] p;
  }
/*! @} */

}
