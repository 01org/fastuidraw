TODO.

 1. The C++-code generated shader(s) for computing dash pattern inclusiveness
    can be improved.

     A. The shaders do a simple linear search. It would be better to do a
        divide-and-conquer search that notes the alignment. Specifically,
        if alignment is 1, the search is a binary search. If the alignment
        is N, then there are (N+1) segments at each level of the search.
        The idea is that since N-values are read at a time, to make the
        next iteration of the search do the right thing. Doing this also
        requires that how we pack data is also changed so that the search
        at each level (each level realized as an iteration in a loop),
        has that the next location to read is easy to compute from the
        previous level and hopefully to be more cache-line friendly.
        Worth nothing however, is that for dash patterns that are not
        big in size, that the current linear search is ok (for example
        if dash-pattern is just 4 or 8 elements under alignment 4).

 3. Add arc methods that are same as that ofW3C canvase:
    - Add ctor for PathContour::arc(vec2 center, float radius,
                                    float startAngle, float endAngle,
                                    bool counterclockwise)
       where the center of the arc is specified as are the
       starting and ending angles and if it goes clockwise
       or counter-clockwise.

    - Add new function/thing: arcTo(vec2 pt1, vec2 pt2, R)
       That makes an arc and 2 line segments as follows.
       Let L be the ray from the previous point to
       pt1 and M be the ray from pt1 to pt2. Let C
       be the circle tangent to both L and M with
       radius R. Let A be the arc of a circle that
       starts at where the C intersects L and ends
       where C intersects M. Then arcTo(pt1, pt2, R)
       is first connect by line segment from previous
       point to the start of A, then A, and then from
       end point of A to pt2.

 4. An interface to build attribute and text data from string(s). Currently
    an application needs to do this by itself, the example code being in
    demos/common/text_helper.[ch]pp.

 5. For some glyphs, curve pair glyph rendering is incorrect (this can be determined when
    the glyph data is generated). Should have an interface that is "take scalable glyph
    that is best" in GlyphSelector class.

 6. W3C blend modes are not yet implemented in GL backend, but Porter-Duff blend modes
    are.

 7. When one zooms in a great deal into a path, the automatic tessellation
    choosing picks higher and higher detailed realization of the paths BUT
    many primitives of the path are not drawn. Should have a way to organize
    the index data so that the CPU can do quick (and easy) vertex culling
    on the path data to reduce (dramatically) the number of vertices processed
    by the vertex shader.

 8. Vulkan backend. Reuse the GLSL code building of fastuidraw::glsl
    together with a 3rd party library to create SPIR-V from GLSL.
    Options for third part library so far are:
            a) libshaderc at https://github.com/google/shaderc.
            b) glslang from Khronos at https://github.com/KhronosGroup/glslang
