TODO.

 1. Dashed stroking is not implemented (yet).

 2. An interface to build attribute and text data from string(s). Currently
    an application needs to do this by itself, the example code being in
    demos/common/text_helper.[ch]pp.

 3. For some glyphs, curve pair glyph rendering is incorrect (this can be determined when
    the glyph data is generated). Should have an interface that is "take scalable glyph
    that is best" in GlyphSelector class.

 4. W3C blend modes are not yet implemented in GL backend, but Porter-Duff blend modes
    are.

 5. Path tessellation is scale invariant because it is based upon curvature. However,
    if a path (or rounded join) is dramtically zoomed in, we start to see the line segments.
    The way out is to instead use curvature multiplied by arc length and when we stroke
    a path to refine the tessellation by S where S is the operator norm of the
    transformation.

 6. Move GLSL code building and default shaders for GLSL to a separate library.
    The motivation is to be able to reuse the shaders from the GL backend for
    an (eventual) Vulkan backend that would convert (at run time) the GLSL
    shaders to SPIR-V. The conversion would be handles by another external
    library, for example libshaderc at https://github.com/google/shaderc.
    It also appears that glslang from Khronos at https://github.com/KhronosGroup/glslang
    also implements a C++(and C) interface to do stuff.

    To make the GLSL code compatible with SPIR-V emision by
    https://github.com/KhronosGroup/glslang, we need the following:
      - global uniforms must be in a uniform block
