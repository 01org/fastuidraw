TODO.

 1. On dashed path stroking with caps (with the shades in glsl module), there can
    be a rendering issue occur when for a rounded cap that is induced by the dash
    pattern near points where the path curves strongly. The rendering issue (only
    on those kinds of caps) is caused by the fact that the distance along the path
    is coming from different segments. One way out is the following (which will make
    the vertex shader even more horribly heavy):
       - If doing dashed stroking, look at the sub-edge one is on. The data at each vertex
         gives the start and stop of each sub-edge. If the entire sub-edge is within
         the dash pattern proceed as now. If the entire sub-edge is within the skip
         pattern, then collapse the edge. If the sub-edge walks though the boundary,
         then extend the sub-edge just enough to cover the cap(s) and emit modified
         distance values (and flags) so that the frag shader will do the right thing.
    One nice benefit is that then the frag shader can skip the dash computation
    except for those segments that go though the dash pattern. Moreover, since
    the geometry is modified respecting the dash pattern, we can (on paper) even
    avoid doing discard except for rounded caps. To make square caps and non-caps
    anti-aliased at cap boundaries, we need to change the edge from the current
    2 quads to be a 5-triangle fan. Another benefit is that we can modify/tweak
    the values on in vertex shader to make pixel width stroking very easy. However,
    there is an icky side: the dash hit check is done for each vertex of the sub-edge
    (instead of once per sub-edge).

 2. The shader(s) for computing dash pattern inclusiveness can be improved.
     A. We have a seperate shader for each alignment value. Ideally there
        would be "some way" to make the shader more machine generated so
        that I do not have 4 shaders, one for each alignment.
     B. The shaders do a simple linear search. It would be better to do a
        divide-and-conquer search that notes the alignment. Specifically,
        if alignment is 1, the search is a binary search. If the alignment
        is N, then there are (N+1) segments at each level of the search.
        The idea is that since N-values are read at a time, to make the
        next iteration of the search do the right thing. Doing this also
        requires that how we pack data is also changed so that the search
        at each level (each level realized as an iteration in a loop),
        has that the next location to read is easy to compute from the
        previous level and hopefully to be more cache-line friendly.
        Worth nothing however, is that for dash patterns that are not
        big in size, that the current linear search is ok (for example
        if dash-pattern is just 4 or 8 elements under alignment 4).

 3. Add arc methods that are same as that ofW3C canvase:
    - Add ctor for PathContour::arc(vec2 center, float radius,
                                    float startAngle, float endAngle,
                                    bool counterclockwise)
       where the center of the arc is specified as are the
       starting and ending angles and if it goes clockwise
       or counter-clockwise.

    - Add new function/thing: arcTo(vec2 pt1, vec2 pt2, R)
       That makes an arc and 2 line segments as follows.
       Let L be the ray from the previous point to
       pt1 and M be the ray from pt1 to pt2. Let C
       be the circle tangent to both L and M with
       radius R. Let A be the arc of a circle that
       starts at where the C intersects L and ends
       where C intersects M. Then arcTo(pt1, pt2, R)
       is first connect by line segment from previous
       point to the start of A, then A, and then from
       end point of A to pt2.

 4. An interface to build attribute and text data from string(s). Currently
    an application needs to do this by itself, the example code being in
    demos/common/text_helper.[ch]pp.

 5. For some glyphs, curve pair glyph rendering is incorrect (this can be determined when
    the glyph data is generated). Should have an interface that is "take scalable glyph
    that is best" in GlyphSelector class.

 6. W3C blend modes are not yet implemented in GL backend, but Porter-Duff blend modes
    are.

 7. Path tessellation is scale invariant because it is based upon curvature. However,
    if a path (or rounded join) is dramtically zoomed in, we start to see the line segments.
    A better tessellation paramater would be a thresshold T which specifies what would
    the maximum distance be allowed between a curve segment and its line segment.
    Then given a transformation matrix M, we can compute by how much it stretches
    (or contracts) distances within the bounding box of the curve. From that we can
    decide what is the tessellation we should choose for a path.

 8. Vulkan backend. Reuse the GLSL code building of fastuidraw::glsl
    together with a 3rd party library to create SPIR-V from GLSL.
    Options for third part library so far are:
            a) libshaderc at https://github.com/google/shaderc.
            b) glslang from Khronos at https://github.com/KhronosGroup/glslang
